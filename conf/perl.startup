#!/usr/local/bin/perl

use strict;
use warnings;
no warnings "uninitialized";

warn "Loading perl startup file...\n\n";


# for things in the /perl directory
use Apache::Registry;
# for things in the /cgi-perl directory
use Apache::PerlRun;
# for status info
use Apache::Status;
use Apache::SizeLimit;
$Apache::SizeLimit::MAX_PROCESS_SIZE = 100000;  # Kill httpd over 500Mb

use DBI ();
use Storable qw(nfreeze freeze thaw ); ####
use Data::Dumper;                      ####
$Data::Dumper::Indent = 1;
# for page handling
use EnsEMBL::Web::Apache::SendDecPage;
use EnsEMBL::Web::Apache::ServerError;
use EnsEMBL::Web::Document::ColourChanger;

use BioMart::Initializer;

# below are needed for renewing from the saved martconf.packed file
use BioMart::Registry;
use BioMart::Dataset::TableSet;
use BioMart::Dataset::GenomicSequence;
use BioMart::Dataset::GenomicAlign;

local $Storable::Deparse = 1; #### MART
# local $Storable::Eval    = 1; #### MART
$Storable::forgive_me    = 1; #### MART

# for making gifs
use GD ();

# Load CGI.pm and call it's compile method to precompile it's autoloaded routines
use CGI qw(-compile :cgi);

use EnsEMBL::Web::SpeciesDefs;
#use EnsEMBL::Web::BlastView::MartDefs;

if( $Apache::Server::Starting == 1 ){ # Only parse the config on first pass
  warn( "\n" . ('=' x 78) . "\n" );
  my $conf = EnsEMBL::Web::SpeciesDefs->new();
  $conf->store;
#--- dynamically build mart registry file...
  EnsEMBL::Web::Document::ColourChanger::change_ddmenu_colours( $conf ); 
  EnsEMBL::Web::Document::ColourChanger::change_zoom_colours(   $conf ); 
  EnsEMBL::Web::Document::ColourChanger::change_CSS_colours(    $conf );
if( keys %{$conf->{'_multi'}{'marts'}} && !$SiteDefs::ENSEMBL_NOMART) { ### NOMARTS
  my $MR_file = $SiteDefs::ENSEMBL_SERVERROOT.'/conf/martRegistry.xml'; ####
  if(! -e $MR_file) {                                                   ####
    open FH, ">$MR_file";                                               ####
    print FH $conf->create_martRegistry;                                ####
    close FH;                                                           ####
  }                             

  # Remove cached mart tmpl files
  my @tmpl_files = glob( $conf->ENSEMBL_TMP_DIR."/*.html.tmpl" );
  my $count = unlink( @tmpl_files );
  $count and warn( "[MARTCONF][INFO] Removed $count HTML template files\n" );
  $count == @tmpl_files 
    or warn( "[MARTCONF][WARN] Some HTML template files not removed: $!" );

  my $MART_CONFFILE = "${SiteDefs::ENSEMBL_SERVERROOT}/conf/martRegistry.xml";
  my $MART_PACKFILE = "${SiteDefs::ENSEMBL_SERVERROOT}/conf/martconf.packed";
  my ($initializer,$registry);                                                    ####
  warn( ( '*' x 78 ) ."\n" );
  if( -e $MART_PACKFILE ) {
if(0){
    open FH, $MART_PACKFILE || die ("Can't open $MART_PACKFILE: $!" );
    local $/ = undef;
    $initializer = thaw(<FH>);
    warn( ( '*' x 78 ) ."\n" );
    warn("THAWING FAILED - REMOVE conf/martconf.packed AND TRY AGAIN") if (!$initializer);
    $initializer->reloadRegistry();
    warn( ( '-' x 78 ) ."\n" );
    warn("[MARTCONF][INFO] Retrieving CACHED configuration from $MART_PACKFILE\n" );
    warn("[MARTCONF][INFO] Remove martconf.packed file before server startup if you need to update registry or dataset configuration\n" );
    warn( ( '-' x 78 ) ."\n" );
}
  } else {
    warn( "[MARTCONF][INFO] Retrieving configuration:\n" );
    warn( ( '-' x 78 ) ."\n" );
    $initializer = BioMart::Initializer->new('registryFile'=>$MART_CONFFILE);
    $registry = $initializer->getRegistry;
    $registry->getConfigurationTrees();
  #  open T, ">TEMP"; print T Data::Dumper::Dumper( $initializer ); close T;
    # cache registry
    warn( ( '-' x 78 ) ."\n" );
    warn("[MARTCONF][INFO] Writing Configuration to $MART_PACKFILE");
    warn( ( '-' x 78 ) ."\n" );
    # Save away the conf
    open( FH, "> $MART_PACKFILE" ) ||
        die ("Can't open $MART_PACKFILE for writing: $!" );
    print FH ( nfreeze($initializer) );
    close FH;
    warn( ('=' x 78) . "\n\n" );
  }
}### NOMART
  # Remove cached image files
  my @cached_images = map { glob($conf->ENSEMBL_TMP_DIR_CACHE."/$_.*") }
    "mapview", "chromoview";
  my $icount = unlink(@cached_images);
  $icount and warn( "[CONF]    [INFO] Removed $icount cached image files\n" );
  $icount == @cached_images 
    or warn( "[CONF]    [WARN] Some cached image files not removed: $!" );
  warn( ('=' x 78) . "\n\n" );

  warn "Server information:\n";
  warn "Name: ".$conf->ENSEMBL_PROTOCOL."://".$conf->ENSEMBL_SERVERNAME.":".$conf->ENSEMBL_PROXY_PORT,"\n";
  warn "Real: ".$conf->ENSEMBL_PROTOCOL."://".$conf->ENSEMBL_SERVER.":".$conf->ENSEMBL_PORT,"\n";
}
else{
  warn( "\n" . ('=' x 78) . "\n" );
  require EnsEMBL::Web::BlastView::MetaData; # Require at startup due to time taken to compile
  require EnsEMBL::Web::BlastView::MetaDataBlast;
  warn( ('=' x 78) . "\n\n" );
}

if( $Apache::Server::Starting != 1 ){ # Only parse the config on first pass
  foreach(0..4) { warn "\n"; }
  warn "*" x 78,"\n";
  foreach(0..4) { warn "\n"; }
}
1;
