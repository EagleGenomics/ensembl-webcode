###############################################################################
#   Server Config for Ensembl
#   In a mod_perl stylee. 
#
#   You should edit the variables in SiteDefs.pm
#
#   The sections which need to know the ServerRoot are in the <Perl></Perl>
#   section.  Below the Perl section is standard httpd.conf configuration.
###############################################################################


TraceEnable off
AddDefaultCharset utf-8 
####
# Load the required apache modules (unless built-into httpd)
# The .so files can be built with apxs if missing
<IfModule !perl_module>
LoadModule perl_module modules/mod_perl.so
</IfModule>
<IfModule !deflate_module>
LoadModule deflate_module modules/mod_deflate.so
</IfModule>
<IfModule !headers_module>
LoadModule headers_module modules/mod_headers.so
</IfModule>
<IfModule !expires_module>
LoadModule expires_module modules/mod_expires.so
</IfModule>
#
####

<Location / >
  AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript text/css application/x-javascript
</Location>

Header unset Etag
FileETag None

<LocationMatch "^/(merged|minified|packed|packed.0|css|img|js|t|c|i)/" >
  ExpiresActive On
  ExpiresDefault "access plus 1 month"
</LocationMatch>
<LocationMatch "static" >
  ExpiresActive On
  ExpiresDefault "access plus 1 month"
</LocationMatch>

<LocationMatch "\.(jpg|jpeg|gif|png|js|css|txt|xml|xls|doc|csv|xls|gff|fa|nh|pdf|swf|gz|tar|zip)$" >
  SetHandler  perl-script
  PerlHandler EnsEMBL::Web::Apache::Static
</LocationMatch>

<Perl>
#!/usr/local/bin/perl -w
use Sys::Hostname;
use File::Path;
# Load the Local Config from SiteDefs.pm
#
# This is a little hairy - SiteDefs is in the same directory as httpd.conf, 
# but that may not be the current directory, and may not be in the path.  
# Use $0 to give the relative path to httpd.conf, and use that to load 
# SiteDefs.pm.  As we are using "require" rather than "use" we need to 
# manually call "import" on the variable set we require (:WEB).
#
# Unfortunately, <Perl> config tries to set Apache variables for all globals,
# and the imported variables are globally scoped.  The hack around this is to
# wrap the import in its own namespace by declaring "package vars" inside a
# block.
#
# Any questions at the back?
###############################################################################
{
    package vars;
    my $sitedefs_dir = $0;
    $sitedefs_dir =~ s/httpd\.conf//;
    unshift @INC, $sitedefs_dir;
    eval{ require SiteDefs };
    if ($@){ die "Can't use SiteDefs.pm - $@\n"; }
    SiteDefs->import(qw(:WEB));
}

$MinSpareServers    = $vars::ENSEMBL_MIN_SPARE_SERVERS;
$MaxSpareServers    = $vars::ENSEMBL_MAX_SPARE_SERVERS;
$StartServers       = $vars::ENSEMBL_START_SERVERS;

@Listen             = ( $vars::ENSEMBL_PORT );
$User               = $vars::ENSEMBL_USER;
$Group              = $vars::ENSEMBL_GROUP;

$ServerAdmin        = $vars::ENSEMBL_SERVERADMIN;
$ServerName         = $vars::ENSEMBL_SERVERNAME;

####################
# Set environment variables. SetEnv directive
####################
foreach my $env( keys %vars::ENSEMBL_SETENV ){
  push @SetEnv, [ $env, $vars::ENSEMBL_SETENV{$env} ];
}

#####################
#   Set server root
#####################
my $hostname = Sys::Hostname::hostname();
warn "
 Starting up Ensembl server on host: $hostname
";

if( my $pf = $vars::ENSEMBL_PIDFILE   ){ $PidFile   = $pf }
if( my $el = $vars::ENSEMBL_ERRORLOG  ){ $ErrorLog  = $el }
if( my $al = $vars::ENSEMBL_CUSTOMLOG ){ $CustomLog = $al }

$ServerRoot         = $vars::ENSEMBL_SERVERROOT;
$DocumentRoot       = $vars::ENSEMBL_SERVERROOT.'/htdocs'; #$vars::ENSEMBL_HTDOCS_DIRS[0];

######################
# set-up our INC path; configured in SiteDefs::ENSEMBL_LIB_DIRS
######################
my %X = map { $_, 1 } @INC;
foreach my $dir( @vars::ENSEMBL_LIB_DIRS ){
  next if $X{$dir};
  if( -d $dir ){
    if( -r $dir ){ unshift @INC, $dir }
    else{ warn( " ENSEMBL_LIB_DIR $dir is not readable\n" ) }
  }
#  else{ warn( "ENSEMBL_LIB_DIR $dir does not exist\n" ) }
}

#########################################################################
# Aliases
# Note that if you include a trailing / on fakename then the server will
# require it to be present in the URL.  
#########################################################################
@Alias = (
    ['/icons'          => "$ServerRoot/icons"],
    ['/wap'            => "$ServerRoot/wap"],
);

#######################################################################
# ScriptAlias: This controls which directories contain server scripts.
#######################################################################
@ScriptAlias = (
  ['/perl'                   => "$ServerRoot/perl"],
  ['/biomart'                => "$ServerRoot/biomart-perl/cgi-bin"]
);

########################
#   Directory configs
########################
$DirectoryIndex         = "index.html index.wml";
## Perl handlers etc....

@PerlChildInitHandler   = qw(EnsEMBL::Web::Apache::Handlers::childInitHandler);

@PerlModule	            = qw(EnsEMBL::Web::Apache::Handlers);
@PerlPostReadRequestHandler = qw(EnsEMBL::Web::Apache::Handlers::postReadRequestHandler);
@PerlTransHandler       = qw(EnsEMBL::Web::Apache::Handlers::cleanURI EnsEMBL::Web::Apache::Handlers::transHandler);
@PerlLogHandler         = qw(EnsEMBL::Web::Apache::Handlers::logHandler);
@PerlCleanupHandler     = qw(EnsEMBL::Web::Apache::Handlers::cleanupHandler);
# @PerlFixupHandler     = qw(Apache::SIG);	

@PerlChildExitHandler   = qw(EnsEMBL::Web::Apache::Handlers::childExitHandler);

$Directory{"$ServerRoot"}={
  AllowOverride   =>  'None',
};

$Directory{"$ServerRoot/htdocs"}={
#    Options         =>  '-Indexes FollowSymLinks',
  AllowOverride   =>  'None',
  Order           =>  'allow,deny',
  Allow           =>  'from all',
};

$Directory {"$ServerRoot/icons"}={
  Options         =>  'None',
  AllowOverride   =>  'None',
  Order           =>  'allow,deny',
  Allow           =>  'from all'
};

# PRIVATE FILES.  SEKRIT SQUIRRELS!
$Location{"/private"}=
$DirectoryMatch{".*/perl/private"}={
    Options       =>  'None',
    AuthType	  => 'Basic',
    AuthName	  => "HelpDesk",
    AuthUserFile  => $vars::ENSEMBL_PRIVATE_AUTH || "$ServerRoot/conf/privateauth",
    Require	  => "valid-user",
};

$Location{"/cgi-bin"}={
    Order         =>  'allow,deny',
    Allow         =>  'from all'
};

## This doesn't work for some reason
############################################################
## temp files directory
############################################################
#$Location{$vars::ENSEMBL_TMP_DIR}={
#  SetHandler      =>  'perl-script',
#  PerlHandler     =>  'EnsEMBL::Web::Apache::TmpFile',
#  Allow           =>  'from all',
#};
#
############################################################
## temp images directory
############################################################
#$Location{$vars::ENSEMBL_TMP_DIR_IMG}={
#  SetHandler      =>  'perl-script',
#  PerlHandler     =>  'EnsEMBL::Web::Apache::TmpFile',
#  Allow           =>  'from all',
#};


####################
# Create TMP dir aliases
####################
my @aliases = (
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/pending" => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/done"    => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/sent"    => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/parsing" => '' ],
);
foreach my $du( @aliases ){
  my( $dir, $url ) = @$du;
  if( ! -d $dir ){
    if( $vars::ENSEMBL_TMP_CREATE ){
      system( "mkdir -p $dir/_ontology" ) == 0 or die( "Can't create dir $dir: $?" );
      chown( (getpwnam($vars::ENSEMBL_USER))[2,3], $dir );
    } else{
      die( "Can't use tmp dir $dir: No such directory" )
    }
  }
  #opendir( DIR, $dir ) or die( "Can't opendir $dir: $!" );

  next unless $url;
  push( @Alias, [ $url => $dir ] );
  #Clean
  if( $vars::ENSEMBL_TMP_DELETE ){
    foreach( readdir(DIR) ){
      if (-f "$dir/$_") {
        unlink("$dir/$_") or warn("Cannot delete $dir/$_: $!")
      } elsif (-d "$dir/$_") {
        next if ($_ eq '.' or $_ eq '..');
        rmtree("$dir/$_") or warn("Cannot delete $dir/$_: $!");
      }
    }
  }
  closedir( DIR );

  # Configure
  $Directory{ $dir } = {
    Options	   => 'None',
    AllowOverride => 'None',
    Order         => 'allow,deny',
    Allow         => 'from all'
  };
}

my $port     = $vars::ENSEMBL_PROXY_PORT; 
my $protocol = $vars::ENSEMBL_PROTOCOL;
if( $protocol eq 'https' && $port == 443 || $protocol eq 'http' && $port == 80 ) {
  $port = '';
} else {
  $port = ":$port";
}

my $root_url = sprintf( "%s://%s%s", $protocol, $vars::ENSEMBL_SERVERNAME, $port ); 
## warn $root_url;
## push @Redirect, ['perm', "/EnsMart/",$root_url.'/biomart/martview#'];
###########################################################
# Error Handling /Crash
###########################################################
$Location{"/Crash"}={
    SetHandler      =>  'perl-script',
    PerlHandler     =>  'EnsEMBL::Web::Apache::ServerError',
};

###########################################################
# Missing Page Handling /Missing
###########################################################
$Location{"/Error"}={
    SetHandler      =>  'perl-script',
    PerlHandler     =>  'EnsEMBL::Web::Apache::Error',
};

###############################################################
# /cgi-perl this is the Apache::PerlRun version of CGI scripts
###############################################################
#$Location{"/cgi-perl"}={
#    SetHandler      =>  'perl-script',
#    PerlHandler     =>  'Apache::PerlRun',
#    Options         =>  '+ExecCGI',
#    allow           =>  'from all',
#    PerlSendHeader  =>  'On',
#};

###########################################################
# /perl this is the ModPerl::Registry scripts directory
###########################################################
$Location{"/perl"}={
  SetHandler      =>  'perl-script',
  PerlHandler     =>  'ModPerl::Registry',
#  Options         =>  '+ExecCGI',
  allow           =>  'from all',
  PerlSendHeader  =>  'On',
};

#############################################################
# Finally,pre-load/pre-compile modules
#############################################################
require ("$ServerRoot/conf/perl.startup");
# $PerlFreshRestart   = 'On';

if($vars::ENSEMBL_MART_ENABLED > 0){
  eval { 
    require 'BioMart/Initializer.pm';
     BioMart::Initializer->import();
    my $init = BioMart::Initializer->new(registryFile => "$vars::ENSEMBL_SERVERROOT/biomart-perl/conf/martRegistry.xml");
    $main::BIOMART_REGISTRY = $init->getRegistry() || die "Can't get registry from initializer";
  };
}
warn " BIOMART_REGISTRY: ",__FILE__,':',__LINE__,' ',$main::BIOMART_REGISTRY if $main::BIOMART_REGISTRY;


__END__
###############################################################################
</Perl>

#######################
# Apache-style Config
#######################
ServerTokens            prod
# ServerType              standalone
Timeout                 300
KeepAlive               On
MaxKeepAliveRequests    100
KeepAliveTimeout        15

MaxClients              50
MaxRequestsPerChild     1000

UseCanonicalName        On
#UseCanonicalName Off

TypesConfig             conf/mime.types
DefaultType             text/plain

<IfModule mod_mime_magic.c>
    MIMEMagicFile       conf/magic
</IfModule>

############################
# LSF ENVIRONMENT VARIABLES
############################
#PassEnv LSF_BINDIR
#PassEnv LSF_SERVERDIR
#PassEnv LSF_LIBDIR
#PassEnv XLSF_UIDDIR
#PassEnv LSF_ENVDIR

HostnameLookups         Off

LogLevel                warn
LogFormat               "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat       "[%P/%{ENSEMBL_CHILD_COUNT}e %{ENSEMBL_SCRIPT_TIME}e %{outstream}n/%{instream}n=%{ratio}n] %h/%{HTTP_X_FORWARDED_FOR}e %l/%{ENSEMBL_SESSION_ID}e %u/%{ENSEMBL_USER_ID}e %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{HTTP_X_Requested_With}e\" %{ENSEMBL_SCRIPT_START}e/%{ENSEMBL_SCRIPT_END}e" ensembl_extended


ServerSignature         Off

# Handle CGI errors with EnsEMBL::Web::Apache::ServerError
ErrorDocument 500 /Crash
# Handle missing pages with EnsEMBL::Web::Apache::NotFound
ErrorDocument 400 /Error
ErrorDocument 401 /Error
ErrorDocument 403 /Error
ErrorDocument 404 /Error

IndexOptions FancyIndexing

AddDescription "GZIP compressed document" .gz
AddDescription "tar archive" .tar
AddDescription "GZIP compressed tar archive" .tgz

ReadmeName README
HeaderName HEADER
IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t

AddEncoding x-compress Z
AddEncoding x-gzip gz

AddLanguage en .en
AddLanguage fr .fr
AddLanguage de .de
AddLanguage da .da
AddLanguage el .el
AddLanguage it .it

LanguagePriority en fr de

AddHandler cgi-script .cgi

AddType application/x-httpd-php3 .php3
AddType application/octet-stream .gz

BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0

ServerTokens   prod
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0

#<Location />
#    Options         -Indexes FollowSymLinks
#    AllowOverride   None
#    SetHandler      perl-script
#    PerlHandler     EnsEMBL::Web::Apache::SendDecPage
#    order           deny,allow
#    allow           from all
#</Location>
<Location /das>
  DefaultType text/xml
  SetHandler  perl-script
  PerlHandler EnsEMBL::Web::Apache::SendDecPage
</Location>

#<Location /perl>
#    SetHandler      perl-script
#    PerlHandler     ModPerl::Registry
#    Options         +ExecCGI
#    allow           from all
#    PerlSendHeader  On
#</Location>

<Location /biomart/martview>
  Options None
  Order allow,deny
  Allow from all
  SetHandler perl-script
  PerlHandler ModPerl::Registry
  Options +ExecCGI
</Location>

<Location /biomart/martservice>
  Options None
  Order allow,deny
  Allow from all
  SetHandler perl-script
  PerlHandler     ModPerl::Registry
  Options +ExecCGI
</Location>

<Location /biomart/martresults>
  Options None
  Order allow,deny
  Allow from all
  SetHandler perl-script
  PerlHandler     ModPerl::Registry
  Options +ExecCGI
</Location>

<Location /biomart/perl-status>
 SetHandler perl-script
  PerlHandler Apache2::status
</Location>

<FilesMatch "\.html?$">
  SetHandler  perl-script
  PerlHandler EnsEMBL::Web::Apache::SendDecPage
</FilesMatch>

<LocationMatch "rss\.xml">
  SetHandler  perl-script
  PerlHandler EnsEMBL::Web::Apache::Rss
</LocationMatch>

<Location /perl>
  Options +ExecCGI
</Location>

<Location /img-cache/hv>
  Order           allow,deny
  Deny            from all
</Location>

<Location /img-cache/kv>
  Order           allow,deny
  Deny            from all
</Location>

ExtendedStatus on

<Location /server-status>
  SetHandler server-status
</Location>

<Location ~ "/CVS/">
  Order           allow,deny
  Deny            from all
</Location>

