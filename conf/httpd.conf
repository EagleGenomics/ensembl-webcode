###############################################################################
#   Server Config for Ensembl
#   In a mod_perl stylee. 
#
#   You should edit the variables in SiteDefs.pm
#
#   The sections which need to know the ServerRoot are in the <Perl></Perl>
#   section.  Below the Perl section is standard httpd.conf configuration.
###############################################################################

<Perl>
#!/usr/local/bin/perl -w

use Sys::Hostname;
use File::Path;

###############################################################################
# Load the Local Config from SiteDefs.pm
#
# This is a little hairy - SiteDefs is in the same directory as httpd.conf, 
# but that may not be the current directory, and may not be in the path.  
# Use $0 to give the relative path to httpd.conf, and use that to load 
# SiteDefs.pm.  As we are using "require" rather than "use" we need to 
# manually call "import" on the variable set we require (:WEB).
#
# Unfortunately, <Perl> config tries to set Apache variables for all globals,
# and the imported variables are globally scoped.  The hack around this is to
# wrap the import in its own namespace by declaring "package vars" inside a
# block.
#
# Any questions at the back?
###############################################################################
{
    package vars;
    my $sitedefs_dir = $0;
    $sitedefs_dir =~ s/httpd\.conf//;
    unshift @INC, $sitedefs_dir;
    eval{ require SiteDefs };
    if ($@){ die "Can't use SiteDefs.pm - $@\n"; }

    SiteDefs->import(qw(:WEB));
}

@Listen             = ( $vars::ENSEMBL_PORT );
$User               = $vars::ENSEMBL_USER;
$Group              = $vars::ENSEMBL_GROUP;

$ServerAdmin        = $vars::ENSEMBL_SERVERADMIN;
$ServerName         = $vars::ENSEMBL_SERVERNAME;

#####################
#   Set server root
#####################
my $hostname = Sys::Hostname::hostname();
print "Starting up Ensembl server on host: $hostname\n";
if( my $pf = $vars::ENSEMBL_PIDFILE   ){ $PidFile   = $pf }
if( my $el = $vars::ENSEMBL_ERRORLOG  ){ $ErrorLog  = $el }
if( my $al = $vars::ENSEMBL_CUSTOMLOG ){ $CustomLog = $al }

$ServerRoot         = $vars::ENSEMBL_SERVERROOT;
$DocumentRoot       = $vars::ENSEMBL_SERVERROOT.'/htdocs'; #$vars::ENSEMBL_HTDOCS_DIRS[0];

######################
# set-up our INC path; configured in SiteDefs::ENSEMBL_LIB_DIRS
######################
my %X = map { $_, 1 } @INC;
foreach my $dir( @vars::ENSEMBL_LIB_DIRS ){
  next if $X{$dir};
  if( -d $dir ){
    if( -r $dir ){ unshift @INC, $dir }
    else{ warn( "ENSEMBL_LIB_DIR $dir is not readable\n" ) }
  }
  else{ warn( "ENSEMBL_LIB_DIR $dir does not exist\n" ) }
}

#########################################################################
# Aliases
# Note that if you include a trailing / on fakename then the server will
# require it to be present in the URL.  
#########################################################################
@Alias = (
    ['/icons'          => "$ServerRoot/icons"],
    ['/wap'            => "$ServerRoot/wap"],
);

#######################################################################
# ScriptAlias: This controls which directories contain server scripts.
#######################################################################
@ScriptAlias = (
    ['/cgi-bin'                => "$ServerRoot/cgi-bin"],
    ['/cgi-perl'               => "$ServerRoot/cgi-perl"],
    ['/perl'                   => "$ServerRoot/perl"],
);

########################
#   Directory configs
########################
$DirectoryIndex         = "index.html index.wml";
@PerlModule	         	= qw(EnsEMBL::Web::Apache::Handlers);
@PerlPostReadRequestHandler = qw(EnsEMBL::Web::Apache::Handlers::initHandler);
@PerlFixupHandler       = qw(Apache::SIG);	
@PerlCleanupHandler     = qw(Apache::SizeLimit);	
@PerlChildInitHandler   = qw(EnsEMBL::Web::Apache::Handlers::childInitHandler);
@PerlChildExitHandler   = qw(EnsEMBL::Web::Apache::Handlers::childExitHandler);

$Directory{"$ServerRoot/htdocs"}={
    Options         =>  '-Indexes FollowSymLinks',
    AllowOverride   =>  'None',
    order           =>  'deny,allow',
    allow           =>  'from all',
};
                
$Directory {"$ServerRoot/icons"}={
    Options         =>  'None',
    AllowOverride   =>  'None',
    Order           =>  'allow,deny',
    Allow           =>  'from all'
};

# PRIVATE FILES.  SEKRIT SQUIRRELS!
$Location{"/private"}=
$DirectoryMatch{".*/perl/private"}={
    Options         =>  'None',
    AllowOverride   =>  'None',
    AuthType	    => 'Basic',
    AuthName	    => "HelpDesk",
    AuthUserFile    => "$ServerRoot/conf/privateauth",
    Require	    => "valid-user",
};

$Location{"/cgi-bin"}={
    AllowOverride   =>  'None',
    Options         =>  'FollowSymLinks',
    Order           =>  'allow,deny',
    Allow           =>  'from all'
};

####################
# Static HTML handler
####################
$FilesMatch{ '\.html?$' } = #'
  {
   SetHandler    => 'perl-script',
   PerlHandler   => 'EnsEMBL::Web::Apache::SendDecPage',
  };

####################
# Ensembl WAP site
####################
#$Directory{"$ServerRoot/wap"}   ={
#    Options         =>  '-Indexes FollowSymLinks',
#    AllowOverride   =>  'None',
#    Order           =>  'allow,deny',
#    Allow           =>  'from all',
#    ForceType       =>  'text/vnd.wap.wml',
#};
#
#$Directory{"$ServerRoot/wap/gfx"}   ={
#    Options         =>  '-Indexes FollowSymLinks',
#    AllowOverride   =>  'None',
#    Order           =>  'allow,deny',
#    Allow           =>  'from all',
#    ForceType       =>  'image/vnd.wap.wbmp',
#};

####################
# Create TMP dir aliases
####################
my @aliases = (
  [ $vars::ENSEMBL_TMP_DIR                 => $vars::ENSEMBL_TMP_URL ] ,
  [ $vars::ENSEMBL_TMP_DIR_IMG             => $vars::ENSEMBL_TMP_URL_IMG ],
  [ $vars::ENSEMBL_TMP_DIR_CACHE           => $vars::ENSEMBL_TMP_URL_CACHE ],
  [ "$vars::ENSEMBL_TMP_DIR/_ontology"     => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/pending" => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/done"    => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/sent"    => '' ],
  [ "$vars::ENSEMBL_TMP_DIR_BLAST/parsing" => '' ],
);
foreach my $du( @aliases ){
  my( $dir, $url ) = @$du;
  if( ! -d $dir ){
    if( $vars::ENSEMBL_TMP_CREATE ){
      system( "mkdir -p $dir/_ontology" ) == 0 or die( "Can't create dir $dir: $?" );
      chown( (getpwnam($vars::ENSEMBL_USER))[2,3], $dir );
    } else{
      die( "Can't use tmp dir $dir: No such directory" )
    }
  }
  opendir( DIR, $dir ) or die( "Can't opendir $dir: $!" );

  next unless $url;
  push( @Alias, [ $url => $dir ] );
  #Clean
  if( $vars::ENSEMBL_TMP_DELETE ){
    foreach( readdir(DIR) ){
      if (-f "$dir/$_") {
        unlink("$dir/$_") or warn("Cannot delete $dir/$_: $!")
      } elsif (-d "$dir/$_") {
        next if ($_ eq '.' or $_ eq '..');
        rmtree("$dir/$_") or warn("Cannot delete $dir/$_: $!");
      }
    }
  }
  closedir( DIR );

  # Configure
  $Directory{ $dir } = {
    Options	   => 'None',
    AllowOverride => 'None',
    Order         => 'allow,deny',
    Allow         => 'from all'
  };
}


###########################################################
# Error Handling /Crash
###########################################################
$Location{"/Crash"}={
    SetHandler      =>  'perl-script',
    PerlHandler     =>  'EnsEMBL::Web::Apache::ServerError',
};

###########################################################
# Missing Page Handling /Missing
###########################################################
$Location{"/Error"}={
    SetHandler      =>  'perl-script',
    PerlHandler     =>  'EnsEMBL::Web::Apache::Error',
};

###############################################################
# /cgi-perl this is the Apache::PerlRun version of CGI scripts
###############################################################
$Location{"/cgi-perl"}={
    SetHandler      =>  'perl-script',
    PerlHandler     =>  'Apache::PerlRun',
    Options         =>  '+ExecCGI',
    allow           =>  'from all',
    PerlSendHeader  =>  'On',
};

###########################################################
# /perl this is the Apache::Registry scripts directory
###########################################################
#$Location{"/perl"}={
#    SetHandler      =>  'perl-script',
 #   PerlHandler     =>  'Apache::Registry',
 #   Options         =>  '+ExecCGI',
 #   allow           =>  'from all',
 #   PerlSendHeader  =>  'On',
#};

#############################################################
# Finally,pre-load/pre-compile modules
#############################################################
require ("$ServerRoot/conf/perl.startup");
$PerlFreshRestart   = 'On';

__END__
###############################################################################
</Perl>

#######################
# Apache-style Config
#######################
ServerType              standalone
Timeout                 300
KeepAlive               On
MaxKeepAliveRequests    100
KeepAliveTimeout        15

MinSpareServers         5 
MaxSpareServers         20
StartServers            7

MaxClients              50
MaxRequestsPerChild     1000

UseCanonicalName        On
#UseCanonicalName Off

TypesConfig             conf/mime.types
DefaultType             text/plain

<IfModule mod_mime_magic.c>
    MIMEMagicFile       conf/magic
</IfModule>

############################
# LSF ENVIRONMENT VARIABLES
############################
PassEnv LSF_BINDIR
PassEnv LSF_SERVERDIR
PassEnv LSF_LIBDIR
PassEnv XLSF_UIDDIR
PassEnv LSF_ENVDIR

HostnameLookups         Off

LogLevel                warn
LogFormat               "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
LogFormat       "[%P %T] %h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" ensembl_extended

ServerSignature         Off

# Handle CGI errors with EnsEMBL::Web::Apache::ServerError
ErrorDocument 500 /Crash
# Handle missing pages with EnsEMBL::Web::Apache::NotFound
ErrorDocument 400 /Error
ErrorDocument 401 /Error
ErrorDocument 403 /Error
ErrorDocument 404 /Error

RewriteEngine on
RewriteRule ^(.*)/das/dsn  $1/Homo_sapiens/das/dsn [P,L]
RewriteRule ^(.*)/das/(.*)/(.*)  $1/$2/das/$3 [P,L]

IndexOptions FancyIndexing

AddDescription "GZIP compressed document" .gz
AddDescription "tar archive" .tar
AddDescription "GZIP compressed tar archive" .tgz

ReadmeName README
HeaderName HEADER
IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t

AddEncoding x-compress Z
AddEncoding x-gzip gz

AddLanguage en .en
AddLanguage fr .fr
AddLanguage de .de
AddLanguage da .da
AddLanguage el .el
AddLanguage it .it

LanguagePriority en fr de

AddHandler cgi-script .cgi

AddType application/x-httpd-php3 .php3
AddType application/octet-stream .gz

BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0

BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0

<Location /server-status>
    SetHandler server-status
    Order deny,allow
    Deny from all
    Allow from 193.62.203 193.62.196.
</Location>

<Location /server-info>
    SetHandler server-info
    Order deny,allow
    Deny from all
    Allow from 193.62.203  193.62.196.
</Location>

#<Location />
#    Options         -Indexes FollowSymLinks
#    AllowOverride   None
#    SetHandler      perl-script
#    PerlHandler     EnsEMBL::Web::Apache::SendDecPage
#    order           deny,allow
#    allow           from all
#</Location>
<Location /perl>
    SetHandler      perl-script
    PerlHandler     Apache::Registry
    Options         +ExecCGI
    allow           from all
    PerlSendHeader  On
</Location>
