#!/usr/local/bin/perl

package psychic;

### Script which handles input from a generic search box and 
### tries to guess what the user wants to do!

use strict;
use warnings;
no warnings 'uninitialized';

use CGI;
use URI::Escape qw(uri_escape);

use EnsEMBL::Web::RegObj;
use EnsEMBL::Web::Root;

my $q            = new CGI;
my $species_defs = $ENSEMBL_WEB_REGISTRY->species_defs;
my $site_type    = lc $species_defs->ENSEMBL_SITETYPE;
my $script       = $species_defs->ENSEMBL_SEARCH;
my %sp_hash      = %{$species_defs->ENSEMBL_SPECIES_ALIASES};
my $dest_site    = $q->param('site') || $site_type;
my $index        = $q->param('idx')  || undef;
my $query        = $q->param('q');
my ($species, $species_path, $url, $other_site_url);

$query =~ s/^\s+//g;
$query =~ s/\s+$//g;
$query =~ s/\s+/ /g;

if ($q->param('species')) {
  $species = $q->param('species');
} elsif ($ENV{'ENSEMBL_SPECIES'} ne 'common') {
  $species = $ENV{'ENSEMBL_SPECIES'};
}

if ($species eq 'all' && $dest_site eq 'ensembl') {
  $dest_site = 'ensembl_all';
  $species = $species_defs->ENSEMBL_PRIMARY_SPECIES;
}

$species = undef if $dest_site =~ /_all/;

if ($dest_site eq 'ebi') {
  $url = "http://www.ebi.ac.uk/ebisearch/search.ebi?db=allebi&query=$query";
  $q->redirect($url);
  exit;
} elsif ($dest_site eq 'sanger') {
  $url = "http://search.sanger.ac.uk/cgi-bin/exasearch?_q=$query";
  $q->redirect($url);
  exit;
} elsif ($dest_site =~ /vega/) {
  if ($site_type eq 'vega') {
    $url = "/Homo_sapiens/Search/Results?species=all&idx=All&q=$query";
  } else {
    $url = "/Homo_sapiens/Search/Results?species=all&idx=All&q=$query";
    $other_site_url = 'http://vega.sanger.ac.uk';
  }
} elsif ($site_type eq 'vega') {
  $url = "/Homo_sapiens/Search/Results?species=all&idx=All&q=$query";
  $other_site_url = 'http://www.ensembl.org'; 
} else {
  $url = "/Homo_sapiens/Search/Results?species=$species&idx=All&q=$query";
}

## Let us parse the first string to see if it is the name of a species or one
## of its aliases... (should we do this if we specify a species in the drop
## down!

$query .= ' ';

foreach my $sp (sort keys %sp_hash) {
  if (lc(substr $query, 0, length ($sp) + 1) eq lc($sp) . ' ') {
    $species = $sp_hash{$sp};
    $query = substr $query, length($sp) + 1;
  }
}

chop $query;

my $feature_maps = {qw(
  gene        Gene
  affyprobe   OligoProbe
  oliogprobe  OligoProbe
  affy        OligoProbe
  oligo       OligoProbe
  snp         SNP
  variaton    SNP
  chr         Chromosome
  clone       Sequence
  contig      Sequence
  chromosome  Chromosome
  supercontig Sequence
  region      Sequence
  sequence    Sequence
  disease     Gene
  domain      Domain
  peptide     Gene
  transcript  Gene
  gene        Gene
  translation Gene
  cdna        GenomicAlignment
  mrna        GenomicAlignment
  protein     GenomicAlignment
  domain      Domain
  marker      Marker
  family      Family
)};

## Now we look to see if we can find a feature in the next part
## of the search string - if so use that as the provisional name
## of the index....

my $index_t;
my $flag = 0;

if ($query =~ /^(\w+)\b/) {
  $index_t = $feature_maps->{lc $1};
  $query   =~ s/^\w+\W*// if $index_t;
} elsif ($query =~ s/^(chromosome)//i || $query =~ s/^(chr)//i) {
  $index_t = 'Chromosome';
} elsif ($query =~ /^(contig|clone|supercontig|region)/i) {
  $index_t = 'Sequence';
}

$index = $index_t if $index_t;

## We have a species so we can see if we can generate a mapview/contigview/cytoview
## link....

if ($species) {
  $species_path = $species_defs->species_path($species) || "/$species";
  
  if (!$query) { ## nothing to search for
    $flag = 1;
  } elsif ($index eq 'Sequence' || $index eq 'Chromosome' || !$index) {
    ## match any of the following:
    if ($query =~ /^\s*([-\.\w]+)[: ]([\d\.]+?[MKG]?)( |-|\.\.|,)([\d\.]+?[MKG]?)$/i ||
        $query =~ /^\s*([-\.\w]+)[: ]([\d,]+[MKG]?)( |\.\.|-)([\d,]+[MKG]?)$/i
    ) {
      my ($seq_region_name, $start, $end) = ($1, $2, $4);
      
      $seq_region_name =~ s/chr//;
      $start = EnsEMBL::Web::Root::evaluate_bp(undef, $start);
      $end   = EnsEMBL::Web::Root::evaluate_bp(undef, $end);
      
      ($end, $start) = ($start, $end) if $end < $start;
      
      my $script = 'Location/View';
      $script    = 'Location/Overview' if $end - $start > 1000000;
      
      if ($index eq 'Chromosome') {
	      $url  = "$species_path/Location/Chromosome?r=$seq_region_name";
	      $flag = 1;
      } else {
	      $url  = "$species_path/$script?r=" . uri_escape($seq_region_name);
        $url .= ':' . uri_escape($start . '-' . $end) if $start && $end;
	      $flag = 1;
      }
    } else {
      if ($index eq 'Chromosome') {
	      $url  = "$species_path/Location/Chromosome?r=$query";
	      $flag = 1;
      } elsif ($index eq 'Sequence') {
	      $url  = "$species_path/Location/View?r=$query";
	      $flag = 1;
      }
    }
  }
  
  if ($query =~ /\.\./ && !$flag) { ## other pairs of identifiers
    ## str.string..str.string
    ## str.string-str.string
    $query =~ /([\w|\.]*\w)(\.\.)(\w[\w|\.]*)/;
    $url   = url("$species_path/jump_to_contig?type1=all;type2=all;anchor1=%s;anchor2=%s", $1, $3);
    $flag  = 1;
  }
} else {
  $url = "/$script?species=;idx=;q=";
}

if (!$flag) {
  $url = 
    $query =~ /^BLA_\w+$/              ? url('/Multi/blastview/%s', $query) :                                                                 ## Blast ticket
    $query =~ /^\s*([ACGT]{20,})\s*$/i ? url('/Multi/blastview?species=%s;_query_sequence=%s;query=dna;database=dna', $species, $1) :         ## BLAST seq search
    $query =~ /^\s*([A-Z]{20,})\s*$/i  ? url('/Multi/blastview?species=%s;_query_sequence=%s;query=peptide;database=peptide', $species, $1) : ## BLAST seq search
    url(($species eq 'ALL' || !$species ? '/default' : $species_path) . "/$script?species=%s;idx=%s;q=%s", $species || 'all', $index, $query);
}

$url = $other_site_url . $url;

$q->redirect($url);

sub url {
  my ($template, @array) = @_;
  return sprintf $template, map uri_escape($_), @array;
}

1;
