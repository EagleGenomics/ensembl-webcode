#! /usr/local/bin/perl

package populate_fragment;

use strict;
use warnings;
no warnings "uninitialized";

use CGI;

use EnsEMBL::Web::RegObj;
use EnsEMBL::Web::Document::WebPage;
use EnsEMBL::Web::Document::Panel::Fragment;
use EnsEMBL::Web::Root;

my $cgi = new CGI;
my $incoming = $cgi->Vars;
my %params = ();
my %components = ();
my @ordered_componenents = ();

warn "--------------------";
warn("AJAX: Populating fragment"); 

foreach my $key (keys %{ $incoming }) {
  if ($key =~ /^component_/) {
    push @ordered_componenents, $key;
    $components{$key} = $incoming->{$key};
    warn "COMPONENT: $key:" . $components{$key}; 
  } else {
    $params{$key} = $incoming->{$key};
    warn "PARAM: $key: " . $params{$key};
  }
}

my $chromosome = undef;
my $location = undef;
my $start = undef;
my $end = undef;
 
my $code = $cgi->param('code');
my $panel_number = $code;
$panel_number =~ s/fragment_//;
$panel_number--;

if ($params{l}) {
  ($chromosome, $location) = split(/:/, $params{l});
  ($start, $end) = split(/-/, $location);
}


my $webpage= new EnsEMBL::Web::Document::WebPage(
  'use_proxy'  => 1,
  'renderer'   => 'Apache',
  'outputtype' => 'HTML',
  'scriptname' => 'contigview',
  'objecttype' => 'Location',
);

my $object = $webpage->dataObjects->[0];
my $species_defs = $ENSEMBL_WEB_REGISTRY->species_defs;
my $fragment = EnsEMBL::Web::Document::Panel::Fragment->new(
                                       object => $object,
                                       'code' => $code,
                                      caption => 'AJAX fragment',
                                       status => 'loading',
                                      display => 'on',
                                     );
my $json_error = "";
my $prefix = "p";
my $json_components = "";

# my $max_length = ($object->species_defs->ENSEMBL_GENOME_SIZE||1) * 1.001e6;
# my($top_start, $top_end) = &top_start_end( $object, $max_length );
my $top_start = $cgi->param('start');
my $top_end   = $cgi->param('end');
$fragment->add_option( 'start', $top_start );
$fragment->add_option( 'end',   $top_end   );
warn "----> AJAX PANEL NUMBER: " . $panel_number;
$object->__data->{'_cv_panel_no'} = $panel_number;
warn "----> AJAX PANEL NUMBER IN OBJECT: " . $object->__data->{'_cv_panel_no'};
foreach my $key(@ordered_componenents) {
  $components{$key} =~ /(.*)::(\w+)$/;
  my $complete = $components{$key};
  my $module = $1;
  my $function = $2;
  my $result = undef;
  if (EnsEMBL::Web::Root::dynamic_use($module, $module)) {
    warn "Creating fragment: $complete";
    no strict 'refs';
    $object->script('contigview');
    $object->get_scriptconfig('contigview');
    $object->prefix($prefix);

    $result = &$complete( $fragment, $object );

    my $start_px = $fragment->option('px_start'); 
    my $end_px   = $fragment->option('px_end');
    my $start_bp = $fragment->option('start'); 
    my $end_bp   = $fragment->option('end');
    my $start_cv = $fragment->option('cv_start');
    my $end_cv   = $fragment->option('cv_end');
    
    $json_components .= "{ $key: { flag: '".$fragment->option('flag')."', URL: '".$fragment->option('URL')."', html: '" . $fragment->html . "', start_bp: '$start_bp', end_bp: '$end_bp', start_cv: '$start_cv', end_cv: '$end_cv', start_px: '$start_px', end_px: '$end_px' } }, ";
    #warn $json_components;
  }
}

warn "--------------------";
$json_components =~ s/, $//;
print "Content-type: text/plain\n\n";
print "{ fragment: { panel_number: '" . $panel_number . "', id: '" . $cgi->param('id') . "', title: '" . $cgi->param('title') . "', components: [ $json_components ], location: { chromosome: '$chromosome', start: '$start', end: '$end' } } }";

sub top_start_end {
  my($obj, $max_length ) = @_;
  my($start,$end) = ($obj->seq_region_start,$obj->seq_region_end);
  if( $obj->seq_region_length < $max_length || $obj->length >= $obj->seq_region_length ) {
    $start = 1;
    $end   = $obj->seq_region_length;
  } elsif( $obj->length < $max_length ) {
    $start -= ( $max_length - $obj->length ) / 2;
    $end   += ( $max_length - $obj->length ) / 2;
    if( $start < 1 ) {
      $start = 1;
      $end   = $start + $max_length - 1;
    } elsif( $end > $obj->seq_region_length ) {
      $end   = $obj->seq_region_length;
      $start = $end - $max_length + 1;
    }
  }
  return ( $start, $end );
}


1;
