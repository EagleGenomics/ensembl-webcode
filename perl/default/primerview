#!/usr/local/bin/perl 
package primerview;

use strict;
use warnings;
no warnings "uninitialized";

use EnsWeb;
use EnsEMBL::DB::Core;
use EnsEMBL::HTML::Page;
use ExtURL;
use CGI qw(:standard :html3);

use Bio::EnsEMBL::Slice;
use Bio::EnsEMBL::Exon;
use Bio::EnsEMBL::DBSQL::SliceAdaptor;
use Bio::EnsEMBL::DrawableContainer;
use EnsEMBL::Web::UserConfigAdaptor;
use EnsEMBL::Web::GeneTrans;
use GD;

my $q 			=  CGI::new(); # new CGI object
my $db  	=  $q->param("db") || 'core';
my $gene_id  	=  $q->param("gene") ; 
my $trans_id 	=  $q->param("transcript"); 
my $prot_id  	=  $q->param("peptide"); 
my $exon_id  	=  $q->param("exon");
my $species 	= $q->param("species") || $ENV{'ENSEMBL_SPECIES'} ; 
my $formsubmit  = $q->param("formsubmit");
my $chr 		=  $q->param("chr")   ;
my $start 		=  $q->param("start") || $q->param("chr_start");
my $end 		=  $q->param("end")   || $q->param("chr_end");

my $databases = EnsEMBL::DB::Core::get_databases_species($species, 'core', $db, 'lite');
my $sliceAdaptor = $databases->{$db}->get_SliceAdaptor();
my $slice;

print $q->header(); # print header
print ensembl_page_header('initfocus' => 1, 'menus' => 1);
print ensembl_search_table();

if ($gene_id){
	eval{
	$slice = $sliceAdaptor->fetch_by_gene_stable_id($gene_id); 
	};
	&EnsEMBL::Web::GeneTrans::get_known_gene($q,$databases, $db, $gene_id) if ($@);
	$chr 		=  $slice->chr_name() ;
	$start 		=  $slice->chr_start() ;
	$end 		=  $slice->chr_end() ;	
}
elsif ($trans_id){
	eval{$slice = $sliceAdaptor->fetch_by_transcript_stable_id($trans_id);};
	if ($@){&ensembl_warning ('Could Not Find Transcript', "The trancript $trans_id does not exist in the database <p>Please contact our <a href='/helpdesk/'>HelpDesk</a> if you have any questions");}
	$chr 		=  $slice->chr_name() ;
	$start 		=  $slice->chr_start() ;
	$end 		=  $slice->chr_end() ;
} 

elsif ($prot_id){
	my $transAdaptor = $databases->{$db}->get_TranscriptAdaptor();
	my $tr ;
	eval{$tr= $transAdaptor->fetch_by_translation_stable_id($prot_id);};
	if ($@ || !$tr){&ensembl_warning ('Could Not Find Peptide', "The translation ID $prot_id does not exist in the database <p>Please contact our <a href='/helpdesk/'>HelpDesk</a> if you have any questions");}
	$trans_id = $tr->stable_id();
	$slice = $sliceAdaptor->fetch_by_transcript_stable_id($trans_id);
	$chr 		=  $slice->chr_name() ;
	$start 		=  $slice->chr_start() ;
	$end 		=  $slice->chr_end() ;
}

elsif  ($exon_id) { # exon id
	my $exonAdaptor = $databases->{$db}->get_ExonAdaptor();
	my $exon ;
	eval{$exon = $exonAdaptor->fetch_by_stable_id($exon_id);};
	if ($@){&ensembl_warning ('Could Not Find Exon ', "The Exon ID $exon_id does not exist in the database <p>Please contact our <a href='/helpdesk/'>HelpDesk</a> if you have any questions");}
	my $empty_slice = new Bio::EnsEMBL::Slice( -adaptor => $sliceAdaptor, -empty   => 1);  # create an empty slice 
	my $exon_transform = $exon->transform($empty_slice);								   # transform the exon to chromosomal coords using the empty slice
		$start = $exon_transform->start();												# the slice will now be a slice of the entire chromosome and the exon is in 
		$end   = $exon_transform->end();													# chromosomal coords										 
		$chr  = $empty_slice->chr_name;
}

my $id = ($gene_id || $trans_id || $exon_id);
my ($form_html, $primer_html, $summary_html) = '';

if ($formsubmit && (!$chr && !$start && !$end)) { # print error message
	&ensembl_warning ('No Identifier or co-ordinates', "Unable to predict primers without a gene, transcript, exon ID or chromosomal co-ordinates <p>Please contact our <a href='/helpdesk/'>HelpDesk</a> if you have any questions");
}

elsif ( $formsubmit || $id || ($start && $end && $chr) ) {
	$form_html = &form_html($q, $chr, $start ,$end, $id); # print input form
	
	print qq(
		$form_html);
	
	($primer_html, $summary_html) = &run_eprimer3($q, $databases, $db, $start, $end , $chr) ;
	print qq(	 
		$primer_html
		$summary_html);
	
}else{
	$form_html = &form_html($q); # print input form
	print qq($form_html </table><br />);
}

print ensembl_page_footer();

# end
###############################################################
########## sub run_eprimer3 ###################################
sub run_eprimer3 { 

my ($q, $databases, $db, $start, $end , $chr) = @_ ;

# get form parameters     
my $species = $q->param("species") || $ENV{'ENSEMBL_SPECIES'};
my $context = $q->param("context");

my $numreturn         = $q->param("numreturn");
my $minsize           = $q->param("minsize") ;
my $maxsize           = $q->param("maxsize");
my $osize             = $q->param("osize");
my $mingc             = $q->param("mingc") ;
my $maxgc             = $q->param("maxgc"); # maximum percent gc content
my $ogcpercent        = $q->param("ogcpercent"); # optimum percent gc content
my $mintm             = $q->param("mintm"); # minimum annealing temp
my $maxtm             = $q->param("maxtm"); # maximum annealing temp
my $opttm             = $q->param("opttm"); # optimum annealing temperature
my $target            = $q->param("target"); # target region
my $forwardinput      = $q->param("forwardinput"); # forward input
my $reverseinput      = $q->param("reverseinput"); # reverse input
my $gcclamp           = $q->param("gcclamp");
my $productosize      = $q->param("productosize");

# get slice

my $ref_sliceAdaptor 	= $databases->{$db}->get_SliceAdaptor();
my $refslice 			= $ref_sliceAdaptor->fetch_by_chr_start_end($chr, $start - $context, $end + $context);
my $refseq 	= $refslice->seq();
my $temp_dir = $SiteDefs::ENSEMBL_TMP_DIR;
my $temp_filename = &Digest::MD5::md5_hex(rand()) . ".seq";
my $temp_filename2 = &Digest::MD5::md5_hex(rand()) . ".results";
my $temp_file2 = $temp_dir . "/" . $temp_filename2;
my $temp_file = $temp_dir . "/" . $temp_filename;

my $html = '';
my $primer_graphic = '';

# run eprimer
my $command  = &EnsWeb::species_defs->ENSEMBL_EMBOSS_PATH."/bin/eprimer3 -filter";
 
    $command .= " -numreturn " . $numreturn if ($numreturn && ($numreturn < 3000)); 
    $command .= " -minsize " . $minsize if ($minsize); 
    $command .= " -maxsize " . $maxsize if ($maxsize) ;
    $command .= " -osize " . $osize if ($osize); 
    $command .=  " -mingc " . $mingc if ($mingc);  
    $command .= " -maxgc " . $maxgc if ($maxgc); 
    $command .= " -ogcpercent " . $ogcpercent if ($ogcpercent); 
    $command .= " -mintm " . $mintm if ($mintm);
    $command .= " -maxtm " . $maxtm if ($maxtm) ;
    $command .= " -otm " . $opttm if ($opttm); 
    $command .= " -target " . $target if ($target);  
    $command .= " -forwardinput " . $forwardinput if ($forwardinput);
    $command .= " -reverseinput " . $reverseinput if ($reverseinput); 
    $command .= " -gcclamp " . $gcclamp if ($gcclamp); 
    $command .= " -productosize " . $productosize if ($productosize); 

# print STDERR $command;

$html .= qq(
<br />
<h4>Primer Results</h4>
	<table class=background1 width=100% border='0' cellspacing="0" >
		<tr class=background2>
			<td>Result</td>
			<td>Product size</td>
			<td>Primer type</td>
			<td>Start</td>
			<td>Length</td>
			<td>Tm</td>
			<td>%GC</td>
			<td>Sequence</td>
		</tr>
);

my $rowcounter = 0;
my @results;
my $product_size;
open(RESULTS, qq(echo "$refseq" | $command |)) or &ensembl_warning("Error running PrimerView", "An error occured while running PrimerView, <p>Please contact our <a href='/helpdesk/'>HelpDesk</a> to report the problem");;
while (<RESULTS>){

######## print eprimer results 

	chomp;
	s/^\s+//; # remove leading spaces
	my @line = split /\s+/, $_;
	if (/PRODUCT SIZE/) { 
		$html .= "<tr";
		$rowcounter++ ;
		if ($rowcounter % 2 == 0 ) { $html .= " class=background3";}
		$html .= "><td>$line[0]</td><td>$line[3]</td>";
		$product_size = $line[0].":".$line[3];}
	if (/FORWARD PRIMER/) {
		$html .= "<td>Forward primer</td><td>" . ($line[2] + $start) . "</td>";
		$html .= qq(
			<td>$line[3]</td>
			<td>$line[4]</td>
			<td>$line[5]</td>
			<td>$line[6]</td>
			<td>$line[7]</td>
			<td>$line[8]</td>
		</tr>
		);
		my ($primer_count, $product ) = split ':', $product_size;
		$results[$primer_count-1]{'Forward'} = { 	'product_size' 	=> $product,
												'pos' 			=> $start,
												'start' 		=> $line[2] ,
												'length' 		=> $line[3],
												'temp'			=> $line[4],
												'gc'			=> $line[5],
												'sequence'		=> $line[6],};
	}
	if (/REVERSE PRIMER/) {
		$html .= "<tr";
		if ($rowcounter % 2 == 0 ) { $html .= " class=background3";}
		$html .= "><td>&nbsp;</td><td>&nbsp;</td>";
		$html .= "<td>Reverse primer</td><td>" . ($line[2] + $start) . "</td>";
		$html .= qq(
		<td>$line[3]</td>
		<td>$line[4]</td>
		<td>$line[5]</td>
		<td>$line[6]</td>
		<td>$line[7]</td>
		<td>$line[8]</td>
	</tr>);
		my ($primer_count, $product ) =split ':', $product_size;
		$results[$primer_count-1]{'Reverse'} = { 	'product_size' 	=> $product,
												'pos' 			=> $start,
												'start' 		=> $line[2] ,
												'length' 		=> $line[3],
												'temp'			=> $line[4],
												'gc'			=> $line[5],
												'sequence'		=> $line[6],};
	}}

$html .= "</table><br /><br />";
close(RESULTS);

# produce graph of primers
$primer_graphic = graph_primerview($refslice, \@results) ;

return ($primer_graphic, '<br /><br />') if $rowcounter == 0;
return ($primer_graphic, $html);
}


###################################################################################
################ sub graph_primerview #############################################
sub graph_primerview {

my ($refslice, $result) = @_;

my $img_type = (GD::Image->can("png")) ? 'png' : 'gif';
my $TMP = $SiteDefs::ENSEMBL_TMP_DIR_IMG;
my $TMP_URL = $SiteDefs::ENSEMBL_TMP_URL_IMG;
my $filename = &Digest::MD5::md5_hex(rand()) . "eprimer_graph.$img_type";

my $uca = new EnsEMBL::Web::UserConfigAdaptor( EnsWeb::species_defs->ENSEMBL_SITETYPE );
my $Config_pv = $uca->getUserConfig( 'primerview' );
	$Config_pv->container_width($refslice->length());

	$Config_pv->{'_add_labels'} = 'true';
	$Config_pv->{'result'} = $result;

my $ep = Bio::EnsEMBL::DrawableContainer->new($refslice, $Config_pv);
my $image    = $ep->render($img_type);
my $imagemap = $ep->render('imagemap');

 open(IMG_OUT, qq(>$TMP/$filename)) || warn qq(PRIMERVIEW: Cannot open temporary image file: $!\n);
 binmode IMG_OUT;
 print IMG_OUT $image;
 close(IMG_OUT);
 my $html =  qq(<br><center><image border=0 src="$TMP_URL/$filename" usemap="#primerview">);
 	$html .= qq(<map name="primerview">$imagemap</map></center>);

return qq(<tr>
			<td nowrap class="background2"><h4>Primer Summary</h4></td>
			<td class="background1">$html<br />&nbsp;</td>
		</tr>
	</table> ); 
}


####################################################################################
############## print main form #####################################################
sub form_html {

my ($q, $chr, $start, $end, $id) = @_;

# get form parameters  
# default species name from url  

my $formsubmit  = $q->param("formsubmit");
my $speciesname = $ENV{'ENSEMBL_SPECIES'} ;
my $species 	= $q->param("species") || $speciesname;
my $context 	= $q->param("context") || 1000;
my $numreturn   = $q->param("numreturn");
my $minsize     = $q->param("minsize")  || 10; 
my $maxsize     = $q->param("maxsize");
my $osize       = $q->param("osize");
my $mingc       = $q->param("mingc") || 25;
my $maxgc       = $q->param("maxgc"); # maximum percent gc content
my $ogcpercent  = $q->param("ogcpercent"); # optimum percent gc content
my $mintm       = $q->param("mintm") ||  55; # minimum annealing temp
my $maxtm       = $q->param("maxtm"); # maximum annealing temp
my $opttm       = $q->param("opttm"); # optimum annealing temperature
my $forwardinput = $q->param("forwardinput"); # forward input
my $reverseinput = $q->param("reverseinput"); # reverse input
my $gcclamp      = $q->param("gcclamp");
my $productosize = $q->param("productosize");
my $target 		 = $q->param("target"); # target region
my $advancedoptions = $q->param("advopt"); # have advanced options been selected
my @contextnumber = (100, 500, 1000, 2000, 5000, 10000);
my @primernumber = (5, 20, 50, 100, 200, 500, 1000, 2000);
my ($type, $display_type) ;
my $mbase = &EnsWeb::bp_to_nearest_unit($start,1);

if ($q->param("gene")){	
	$type = "gene" ;
	$display_type = "Gene";}
elsif ($q->param("transcript")|| $q->param('peptide')){	
	$type = "trans" ;
	$display_type = "Transcript";}
elsif ($q->param("exon")){	
	$type = "exon"; 
	$display_type = "Exon";}

my $html = '';
my $url; 
my @spp_chr;	

foreach ($q->param()){
	next if (/formsubmit/ || /advopt/);
	$url .= "&$_=".($q->param($_));
}

my $identifier = qq(
	<tr align="left" valign="middle">
			<td nowrap class="background2" width="18%"><H4>$display_type ID</H4></td>
      		<td class="background1"><b>&nbsp;
				<a href="/$ENV{'ENSEMBL_SPECIES'}/).$type.qq(view?).lc($display_type).qq(=$id">$id</a>
				</b>&nbsp;&nbsp;<input type="hidden" name=").lc($type).qq(" value="$id"> </td>
	</tr>) if ($id);

$html .= qq(
	<h4>Primer Design</h4>
	<form name="/$ENV{'ENSEMBL_SPECIES'}/eprimer?chr=$chr&start=$start&end=$end" method="get"  >
	<input type="hidden" name="formsubmit" value="yes">
	<TABLE ALIGN="CENTER" BGCOLOR="#ffffff" WIDTH="100%" BORDER="1" CELLPADDING="3" CELLSPACING="0">);
	
if ($chr && $start && $end){ 
	$html .= qq($identifier
		<tr align="left" valign="middle">
      		<td nowrap class="background2"><h4>Target Location</h4></td>
      		<td class="background1">&nbsp;&nbsp;<b>View gene in genomic location:</b> &nbsp; 
			<a href="/$ENV{'ENSEMBL_SPECIES'}/contigview?chr=$chr&chr_start=$start&chr_end=$end">$start - $end bp ($mbase)</a> on chromosome $chr <br /> &nbsp; 
				<input type="hidden" name="species" value="$species">
				<input type="hidden" name="chr" value="$chr">
				<input type="hidden" name="start" value="$start">
				<input type="hidden" name="end"  value="$end">	
			</td>
    	</tr>);
}else{
	$html .= qq(
	<tr align="left" valign="middle">
      		<td nowrap class="background2"><h4>Primer Location</h4></td>
      		<td class="background1">&nbsp;<br />
				<table cellspacing="0" cellpadding="0" border="0" width="80%" class="background1"> 
				<tr>
					<td><b>&nbsp;&nbsp;Species:</b> </td>
					<td><b>&nbsp;&nbsp;Chromosome:</b> </td>
					<td><b>&nbsp;&nbsp;Start:</b> </td>
					<td><b>&nbsp;&nbsp;End:</b>  </td>
				</tr>
				<tr>
					<td>&nbsp;&nbsp;&nbsp;&nbsp;<select name="species" value="$species" onchange="Get_Chr">
					);
			 
		for my $spp ( @{EnsWeb::species_defs->ENSEMBL_SPECIES} ){
			(my $display_spp = $spp) =~ s/_/ /g;
			my $selected = ($spp eq 'Homo sapiens') ? 'selected' : '';
			$html .= qq(<option value="$spp" $selected> $display_spp</option>);
			my $chr_ref = EnsWeb::species_defs->get_config($spp, 'ENSEMBL_CHROMOSOMES') || [];
			my $spp_chr_string = "var $spp = new Array(";
			for (@$chr_ref){$spp_chr_string .= qq("$_",);}
			$spp_chr_string .= ");" ;		
			push @spp_chr, $spp_chr_string ;
		}
		
		$html .= qq(
					</select></td>
					<td>&nbsp;&nbsp;&nbsp;&nbsp;<input type="text" name="chr" value="$chr"></td>
					<td>&nbsp;&nbsp;&nbsp;&nbsp;<input type="text" size="15" name="start" value="$start"></td>
					<td>&nbsp;&nbsp;&nbsp;&nbsp;<input type="text" size="15" name="end"  value="$end"></td>
				</tr>
				</table>
				&nbsp;<br />
			</td>
    	</tr>
	);
}

$html .= qq(
		<tr>
			<td nowrap class="background2"><h4>Primer Options</h4></td>
			<td class="background1">&nbsp;&nbsp;<br />
				<table cellspacing="0" cellpadding="0" border="0" width="100%" class="background1">
					<tr>
					<td>&nbsp;&nbsp;</td>
					<td>Flanking length<br><select name="context" >\n);

foreach my $item (@contextnumber) {
	$html .= qq(<option value="$item");
	if ($item == $context) {  $html .= qq( selected);}
	$html .= qq(>$item</option>\n);
}
					
$html .= qq(</select>
			</td>
			<td>Target selected sequence<br><input type="checkbox" name="target");					

if (length($target)>1) { 
	$html .= qq( checked value="$target">);
}else {
	$target =  $context ."," . ($context + $end - $start);
	$html .= qq( value="$target">);
}

$html .= qq(</td>
		<td>Forward input<br><input type="text" size="15" name="forwardinput" value="$forwardinput"></td>
		<td>Reverse Input<br><input type="text" size="15" name="reverseinput"  value="$reverseinput"></td>
	</tr>
	<tr>
		<td colspan="5">&nbsp;<br></td>
	</tr>
	<tr>
		<td>&nbsp;&nbsp;</td>
		<td>Melting temperature (Minimum) <br>
			<input type="text" name="mintm" value="$mintm" size="15">
		</td>
		<td>% GC Content (Minimum)<br>
			<input type="text" name ="mingc" value="$mingc" size="15" >
		</td>
		<td>Primer length (Minimum) <br>
			<input type="text" name="minsize" size="15" value="$minsize">
		</td>
		<td>Number of Primers to display<br>
			<select name="numreturn">\n
);
foreach my $item (@primernumber) {
	$html .= qq(<option value="$item");
	if ($item == $numreturn) {  $html .= qq( selected);}
	$html .= qq(>$item</option>\n);
}

$html .= qq(</select></td>
			<tr>
				<td colspan="5">&nbsp;<br></td>
			</tr>);
		
if ($advancedoptions) {
	$html .= qq(
		<tr><td colspan="5"><hr noshade><b><font color="#5A85D6">Advanced options</font></b></td></tr>
		<tr>
			<td colspan="5">&nbsp;</td>
		</tr>
		<tr>
			<td>&nbsp;&nbsp;</td>
			<td>Annealing temperature (Optimum)<br> 
				<input type="text" name="opttm" value="$opttm" size="15"></td>
			<td>% GC Content (Optimum) <br>
				<input type="text" name ="ogcpercent" value="$ogcpercent" size="15" ></td>
			<td>Primer length (Optimum) <br>
				<input type="text" name="osize" size="15" value="$osize"></td>
			<td>GC clamp<br>
				<input type="text" name="gcclamp" size="15" value="$gcclamp"></td>
		</tr>
		<tr><td colspan="5"><br>&nbsp;</td></tr>
		<tr><td>&nbsp;&nbsp;</td>
			<td>Melting temperature (Maximum)<br> 
				<input type="text" name="maxtm" value="$maxtm" size="15"></td>
			<td>% GC Content (Maximum) <br>
				<input type="text" name ="maxgc" value="$maxgc" size="15" ></td>
			<td>Primer length (Maximum) <br>
				<input type="text" name="maxsize" size="15" value="$maxsize"></td>
			<td>Optimum product size<br>
				<input type="text" name="productosize" size="15" value="$productosize">
			</td>
		</tr>
		<tr align='right'>
			<td>&nbsp;&nbsp;</td>
			<td colspan="2"><input type="image" value="Search" src="/gfx/lookup.gif" border="0" ><br /></td>
			<td colspan="2"><a href="/$ENV{'ENSEMBL_SPECIES'}/$ENV{'ENSEMBL_SCRIPT'}?$url">Hide advanced options</a><br /><input type="hidden" name="advopt" value="yes"></td>
		</tr>
);
} else {
	$html .= qq(
		<tr align='right'>
			<td>&nbsp;&nbsp;</td>
			<td colspan="2"><input type="image" value="Search" src="/gfx/lookup.gif" border="0" ><br /></td>
			<td colspan="2"><a href="/$ENV{'ENSEMBL_SPECIES'}/$ENV{'ENSEMBL_SCRIPT'}?advopt=yes$url">Show advanced options</a><br /></td>
		</tr>		
	);
}
$html .= qq(
		</table>&nbsp;&nbsp;<br />
			</td>
		</tr>
);

$html .= "</form>"; 
$html .= '
	<script LANGUAGE="JavaScript" >
	function Get_Chr(){
		';

for (@spp_chr){$html .= "$_"};

$html .= qq(		
	
	}
	</script>
);
return $html;
}

use Bio::EnsEMBL::Registry; Bio::EnsEMBL::Registry->disconnect_all();1;
