#!/usr/local/bin/perl

package tag_response;
use strict;
use EnsWeb;
use EnsEMBL::HTML::Page;
use CGI qw/:standard :form :netscape3/;
use Bio::EnsEMBL::ExternalData::Haplotype::Select;
use Bio::EnsEMBL::ExternalData::Haplotype::Tag;
use Data::Dumper;

my $q = new CGI;

my $r =Apache->request();

###################################
###################################
my $DEBUG=0;  # Zero set to false
###################################
###################################

my $pre_snp_id_list    = $q->param('snp_id_list');
my $hap_id             = $q->param('hap_id');
my $pre_hap_block      = $q->param('hap_block');
my $pre_pop_info       = $q->param('pop_info');
my $pre_selected_fam   = $q->param('selected_fam');
my $pre_freq_fam       = $q->param('freq_fam');

# print Dumper $q;

# print Dumper $pre_snp_id_list;
# print Dumper $pre_hap_block;
# print Dumper $pre_pop_info;
# print Dumper $pre_selected_fam;
# print Dumper $pre_freq_fam;



###############################################################
## I hate the way I am passing the values, it's terrible
## but is working and I don't find any other better right now.
###############################################################

####################################
# trim values
####################################
$pre_pop_info =~ s/^\s+//;
$pre_pop_info =~ s/\s+$//;

###################################
## convert these values to arrays
###################################

my $snp_id_list    = [split /\W+/, $pre_snp_id_list]; 
my $hap_block      = [split /[^\w-]+/, $pre_hap_block];
my $selected_fam   = [split /\W+/, $pre_selected_fam];

my $pop_info    = undef;
my $tmp         = [split /\n/,  $pre_pop_info];

foreach my $i (0..$#$tmp){
    $tmp->[$i] =~ s/^\s+//;
    $tmp->[$i] =~ s/\s+$//;
    $pop_info->[$i] = [split /\t|\s+/, $tmp->[$i]];
}

print header(),
      ensembl_page_header( 'initfocus'=>1 );
print ensembl_search_table('', "SNP");

_hap_results($snp_id_list, $hap_block, $selected_fam, $pop_info);

print ensembl_page_footer();
&ensembl_exit();

########################################################

sub _hap_results {
    my ($snp_id_list, $pre_hap_block, $selected_fam, $pre_pop_info) = @_;


#########################################
# printing things step by step
#########################################

print "<pre>\n";

print "=" x 40,"\n";

print "The full haplotype for the block $hap_id is:\n\n";

# display the haplotype and also the family ID and frequency
foreach my $i (0..$#$pre_hap_block){
    print "@{$pre_pop_info->[$i]}"
         ."\t"
         .$pre_hap_block->[$i]
         ."\n";
}

print "\n";


##########################################
# select just the families we need 
##########################################
my $hap_block = undef;
my $pop_info  = undef;

foreach my $i (0..$#$selected_fam){
    $hap_block->[$i] = $pre_hap_block->[$selected_fam->[$i]];
    $pop_info->[$i]  = $pre_pop_info->[$selected_fam->[$i]];
}

###############################################
# after considering just the selected families
###############################################



##########################################
# example of function
##########################################

my $hap = Bio::EnsEMBL::ExternalData::Haplotype::Select-> new ($hap_block, $snp_id_list, $pop_info);

my $input_block   = $hap->input_block;
my $snp_ids       = $hap->snp_ids;
my $pop_freq      = $hap->pop_freq;
my $deg_snp       = $hap->deg_snp;
my $silent_snp    = $hap->silent_snp;
my $useful_snp    = $hap->useful_snp;
my $ht_type       = $hap->ht_type;
my $ht_set        = $hap->ht_set;
my $snp_type_code = $hap->snp_type_code;
my $snp_and_code  = $hap->snp_and_code;
my $split_hap     = $hap->split_hap;

my $tag = Bio::EnsEMBL::ExternalData::Haplotype::Tag-> new($hap->ht_set);

my $tag_list   = $tag->tag_list;
my $tag_length = $tag->tag_length;


print "\n===========================================\n";
print "report of the analysis\n";
print "===========================================\n";

_hap_report($hap, $tag);

###################### just for checking ###########

if ($DEBUG) {
#### INPUT BLOCK ##########
print "\n[input_block]\n";
foreach (@$input_block){
    print $_,"\n";
}

#### print pop frequency ##########
print "\n[pop_freq]\n";
foreach (@$pop_freq){          
    print "@$_\n"; 
}

#### snp ids ##########
print "\n[snp_ids]\n";
foreach (@$snp_ids){
    print $_,"\t";
}
print "\n";

#### degenerate snps ##########
print "\n[splitted haplotype]\n";
foreach (@$split_hap){
    print "@$_\n";
}   
print "\n";

#### degenerate snps ##########
print "\n[deg_snp]\n";
foreach (@$deg_snp){
    print $_,"\t";
}   
print "\n";

#### silent  snps ##########  
print "\n[silent_snp's]\n";
foreach (@$silent_snp){
    print $_,"\t";
}  
print "\n";

#### useful snps ##########  
print "\n[useful_snp]\n";
foreach (@$useful_snp){
    print $_,"\t";
}  
print "\n";

#### useful snps ##########
print "\n[snp_type_code]\n";
foreach (@$snp_type_code){
    print $_,"\t";
}
print "\n";

#### ht_type ##########  
print "\n[ht_type]\n";
foreach (@$ht_type){
    print $_,"\t";
}  
print "\n";

#### ht_set##########  
print "\n[ht_set]\n";
foreach (@$ht_set){
    print "@$_\n";
}  
print "\n";

#### ht_set##########
print "\n[SNP_and_CODE]\n";
foreach (@$snp_and_code){
    print "@$_\n";
}
print "\n";
}


#######################################
# generate colour code for the values
#######################################

my $colour_code= {};

# red for degeneration indicating: Better not to use this family
$colour_code->{'-1'} = "#FF0000";

# white for silent, means that SNP does not contribute to the final result
$colour_code->{'0'}  = "#FFFFFF";

foreach my $i (0..$#$ht_type){
   my $tmp_colour = _colour_code();

   $colour_code->{$ht_type->[$i]} = $tmp_colour->[$i];

}


print "\n==============================\n";
print "report by snp";
print "\n==============================\n";


my $output =[];

foreach  my $i (0..$#$snp_ids){

    #############################
    #### check usefull snp
    #############################
    my $tmp_snp_type = "";
    my $tmp_snp_type_code ="";

   if (my $pos = _is_there($useful_snp,$snp_ids->[$i])){
       $tmp_snp_type = "INFORMATIVE";

       #######################################
       #### if is informative get it snp_type_code
       #######################################
       $tmp_snp_type_code = $snp_type_code->[$pos-1]; 

    }
    elsif (_is_there($deg_snp,$snp_ids->[$i])){
       $tmp_snp_type = "AMBIGUOUS";

       #######################################
       ##### degeneration is -1 
       #######################################
       $tmp_snp_type_code = -1; 
    }
    elsif (_is_there($silent_snp,$snp_ids->[$i])){
       $tmp_snp_type = "NON INFORMATIVE";

       #######################################
       ##### silent means 0 
       #######################################
       $tmp_snp_type_code = 0; 
    }
    else {
       $tmp_snp_type = "CAN'T BE";
    }

    push my @tmp, $i+1, $snp_ids->[$i], $tmp_snp_type, $tmp_snp_type_code; 
    push @$output, [@tmp];
}


print "<table border=1>";

print "<tr>
    <td align=center>POSITION</td>
    <td align=center>SNP ID</td>
    <td align=center>SNP CATEGORY</td>
    <td align=center>TAG GROUP</td></tr>\n";

foreach my $val (@$output){
    print "<tr>\n";
    foreach (@$val){
        print "<td bgcolor=$colour_code->{$val->[3]} align=center>&nbsp;$_&nbsp;</td>";
    }
    print "</tr>\n";
}

print "</table>";


print "\n\n================================\n";
print "report by snp_type";
print "\n================================\n";

# we convert $out table into a hash

my $snp_hash = {};

# cluster snp's by type
foreach my $i (0..$#$output){
    my $tmp = $output->[$i]->[1]." (".$output->[$i]->[0].") ";

    push @{$snp_hash->{$output->[$i]->[3]}}, $tmp;
}

my $length = @$ht_type;    #evalue as scalar the ht_set

print "\n";

##### print values #####

print "<table border =1>\n";
print "<tr><td>TAG GROUP</td><td>SNP's ID (Position on haplotype)</td>\n";
foreach my $key (
    sort { $a <=> $b}
    keys %$snp_hash){

    print "<tr><td bgcolor=$colour_code->{$key} >&nbsp;$key&nbsp;</td><td>";

    _print_snp($snp_hash->{$key});

    print "</td></tr>\n"; 
}

print "</table>\n";

print "\n=============================================\n";
print "you will need to tag one snp of each tag group";
print "\n=============================================\n\n";

print "<A name='index'></A>";

foreach my $i(0..$#$tag_list){


    print "<A href='#".($i+1)."'>pattern ".($i+1)."</A>\n";

    foreach my $j (0..$#{$tag_list->[$i]}){
        my $cc = $ht_type->[$tag_list->[$i][$j]];

        print "<span style='background-color :$colour_code->{$cc};'>"
             ."$cc\t"
             ."</span>";
    }
    print "\n";

}

print "<br>\n";

foreach my $i(0..$#$tag_list){

    my $tag_value = [];

    print "<A name='".($i+1)."'>pattern ".($i+1)."</A>"
          ."\t<A href='#index'>back to pattern list</A>\n";
;

    print "<table border =1>\n";
        print "<tr><td>TAG GROUP</td>
               <td>SNP's ID (Position on haplotype)</td>\n";

    foreach my $j(0..$#{$tag_list->[$i]}){
        my $key = $ht_type->[$tag_list->[$i][$j]];

        print "<tr><td  bgcolor=$colour_code->{$key}>$key</td><td>";

        _print_snp($snp_hash->{$key});

        print "</td></tr>\n";

    }

    print "</table>\n";


    #get tag list
    foreach my $j (0..$#{$tag_list->[$i]}){
        my $cc = $ht_type->[$tag_list->[$i][$j]];

        push(@$tag_value, $cc);
    }

    _print_haplotype($hap, $colour_code, $tag_value);

}


print "</pre>\n";

}

sub _print_snp{
    my $value = shift;

    foreach (@{$value}){
        # split the value
        my $tmp = [split /\W+/, $_];

        print qq(<A HREF="/$ENV{'ENSEMBL_SPECIES'}/snpview?snp=$tmp->[0]"> $_</A
><br>);

    }
}

sub _hap_report{
    my $hap = shift;
    my $tag = shift;

    my $hap_length    = $hap->hap_length;
    my $deg_snp_nu    = @{$hap->deg_snp};
    my $silent_snp_nu = @{$hap->silent_snp};
    my $useful_snp_nu = @{$hap->useful_snp};
    my $ht_length     = @{$hap->ht_type}; 
    my $deg_fam       = $hap->deg_fam;

    my $tag_list   = $tag->tag_list;
    my $tag_length = $tag->tag_length;


    my $hap_tag_ratio  = $tag_length/$hap_length;
    my $hap_ht_ratio   = $ht_length/$hap_length;
    my $number_of_tags = @{$tag_list};

    print "------------------------------------------\n";
    print "haplotype summary report\n";
    print "------------------------------------------\n";

    print "<table border=1>";

    print "<tr>
        <td>Total number of SNPs</td><td>&nbsp;$hap_length&nbsp;</td>
           </tr>";

    print "<tr>
        <td>Haplotype tag groups</td><td>&nbsp;$ht_length&nbsp;</td>
           </tr>";

    print "<tr>
        <td>No. htSNP to resolve haplotype</td><td>&nbsp;$tag_length&nbsp;</td>
           </tr>";

    print "<tr>
        <td>No. of tag group combinations</td><td>&nbsp;$number_of_tags&nbsp;</td>
           </tr>";

    if ($useful_snp_nu){
    print "<tr>
        <td>Informative SNPs</td><td>&nbsp;$useful_snp_nu&nbsp;</td>
           </tr>";
    }

    if ($deg_snp_nu){
    print "<tr>
        <td>Non-Informative SNPs</td><td>&nbsp;$deg_snp_nu&nbsp;</td>
           </tr>";
    }

    if ($silent_snp_nu){
    print "<tr>
        <td>Ambiguous SNPs</td><td>&nbsp;$silent_snp_nu&nbsp;</td>
           </tr>";
    }

    print "<tr>
        <td>Tag groups/total SNP ratio</td><td>&nbsp;$hap_ht_ratio&nbsp;</td>
           </tr>";

    print "<tr>
        <td>Tag SNP/Total SNP ratio</td><td>&nbsp;$hap_tag_ratio&nbsp;</td>
           </tr>";


    print "</table>";
   
    
    print "\n\n";

    my $redundance = 0;
    foreach my $family (keys %$deg_fam) {
        if (scalar @{ $deg_fam->{$family} }>1){
            $redundance =1;
            last;
        }
    }

    if ($redundance){

        print "Note:\n"
             ."Some haplotype share the same pattern"
             ." and has been clustered.\n"
             ."As these haplotypes can not be differences you have to\n"
             ."re-analise these haplotypes.\n";

        print "<table border=1>";
        print "<tr>"
              ."<td>haplotype selected</td>"
              ."<td>share the same pattern</td>"
              ."</tr>";

        foreach my $family (keys %$deg_fam) {
            if (scalar @{ $deg_fam->{$family} }>1){
                print "<tr>";
                print "<td>"
                     .($family+1)
                     ."</td><td>";
                foreach my $k (0..$#{$deg_fam->{$family}}){
                    print ($deg_fam->{$family}->[$k]+1);
                    print "\t";
                }
                print "</td>";
                print "</tr>";
            }
        }
    }

    print "</table>";

}

# print the haplotype and colour the bases tag
sub _print_haplotype{
    my $hap         = shift;
    my $colour_code = shift;
    my $tag_list    = shift;

    my $snp_and_code  = $hap->snp_and_code;
    my $split_hap     = $hap->split_hap;
    my $pop_freq      = $hap->pop_freq;


    print "\n";
    foreach my $i (0..$#$split_hap){

        # print ID and frequency
        print "@{$pop_freq->[$i]}\t";

        foreach my $j (0..$#{$split_hap->[$i]}){

            my $base     = $split_hap->[$i]->[$j];
            my $snp_id   = $snp_and_code->[$j]->[0];
            my $snp_code = $snp_and_code->[$j]->[1];
            my $cc       = $colour_code->{$snp_code};

            if(_is_there($tag_list, $snp_code)){
                print "<span style='background-color :"
                     .$cc.";'>"
                     .$base
                     ."</span>";
            }
            else{
                print $base;
            }
        }
        print "\n";
    }
    print "\n";
}

# return one more to avoid zero as false
sub _is_there{

    my($arr,$value)=@_;

    foreach my $i (0..$#$arr){
        if ($arr->[$i] eq $value){

            # return one more to avoid zero as false
            return $i+1;
        }
    }
}

#
# list of colour codes
# if you need more you can add values to this list.
# The codes has been selected to return an nice output.
#
sub _colour_code{
    my $colour_code = 
        [qw(#FFFF00
            #33CCFF
            #33FFCC
            #CC33FF
            #CCFF33
            #FFCC33
            #FF33CC
            #AACCFF
            #AAFFCC
            #CCAAFF
            #CCFFAA
            #FFCCAA
            #FFAACC
            #CC66AA
            #66CCAA
            #66AACC)];

    return $colour_code;
};

use Bio::EnsEMBL::Registry; Bio::EnsEMBL::Registry->disconnect_all();1;
