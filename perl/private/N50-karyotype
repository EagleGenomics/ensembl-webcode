#!/Usr/local/bin/perl

## Restructured version of MapView - removing a lot 
##
##

package karyoview;
use strict;
use EnsWeb;
use EnsEMBL::DB::Core;
use CGI qw/:standard :form :netscape3/;
use EnsEMBL::Web::UserConfigAdaptor;
use Bio::EnsEMBL::VDrawableContainer;
use GD;

#############################
# Load the species defs file
#############################

my $q  			= new CGI;
my $ENSEMBL_SERVERROOT 	= EnsWeb::species_defs->ENSEMBL_SERVERROOT;
my $img_type 		= 'png' ;#(GD::Image->can("gif")) ? 'gif' : 'png';
my $TMP     = $SiteDefs::ENSEMBL_TMP_DIR_IMG;
my $TMP_URL = $SiteDefs::ENSEMBL_TMP_URL_IMG;

my $uca = new EnsEMBL::Web::UserConfigAdaptor( EnsWeb::species_defs->ENSEMBL_SITETYPE );
my $Config = $uca->getUserConfig( 'Vkaryotype2' );
   $Config->set('Videogram','padding',1);
my %colours = (
    'red_1' => $Config->colourmap->add_hex('990000'),
    'red_2' => $Config->colourmap->add_hex('ff0000'),
    'red_3' => $Config->colourmap->add_hex('ff6666'),
    'red_4' => $Config->colourmap->add_hex('ffcccc'),
    'red_5' => $Config->colourmap->add_hex('ff9933'),
    'red_6' => $Config->colourmap->add_hex('ffff66'),
    'red_7' => $Config->colourmap->add_hex('66ff66'),
);

###############
# Print Header
###############
if( defined( $ENV{'MOD_PERL'} ) ) {
  my $r = Apache->request();
  print header();
  $r->err_header_out('ensembl_headers_out'=>1);
  print EnsWeb::make_cgi_header(('initfocus'=>1, 'menus'=>1));
  print EnsWeb::print_form('', "marker");
}
my $databases = &EnsEMBL::DB::Core::get_databases( 'core', 'map' );
print &ensembl_exception("Sorry, the Ensembl database is currently unavailable.",$databases->{'error'} ) if( $databases->{'error'});

#######################################################################
# Draw the main map
######################################################################

my $ca;
my $ka;
eval {
  $ka = $databases->{'core'}->get_KaryotypeBandAdaptor; 
  $ca = $databases->{'core'}->get_ChromosomeAdaptor; 
};
&ensembl_exception("Sorry, can't attach attach adaptors",$@,1) if($@);
print STDERR "KA: ", $databases->{'core'} ," $ka\n";
$Config->container_width( EnsWeb::species_defs->MAX_CHR_LENGTH );

use DBI;

my $DB = EnsWeb::species_defs->databases;
my   $DBname = $DB->{'ENSEMBL_DB'}->{'NAME'};
my   $DBhost = $DB->{'ENSEMBL_DB'}->{'HOST'};
my   $DBport = $DB->{'ENSEMBL_DB'}->{'PORT'};
my $dbh    = DBI->connect( "dbi:mysql:$DBname:$DBhost:$DBport", 'ensadmin','ensembl' );

$dbh->do("drop table js5.N50");
$dbh->do("create table js5.N50 (chr_name varchar(16), chr_start int, chr_end int,unique(chr_name,chr_start) )");
my $aref = $dbh->selectall_arrayref( qq(
  select c.name as chr_name, a.chr_start, a.chr_end
    from chromosome as c, assembly as a
   where c.chromosome_id = a.chromosome_id and a.superctg_name not like 'C%'
   order by c.name, a.chr_start
));

my ($chr_name,$chr_start,$chr_end);
foreach(@$aref) {
 if( ($chr_name ne $_->[0]) || ($_->[1]-$chr_end > 1)) {
   if($chr_name) {
     &output( $chr_name, $chr_start, $chr_end );
   }
   ($chr_name, $chr_start,$chr_end) = @$_;
 } else {
   $chr_end = $_->[2];
 }
}
&output($chr_name, $chr_start,$chr_end);

my %lengths = map { @$_ } @{$dbh->selectall_arrayref("select name, length from chromosome")};

my $BIN_LENGTH = EnsWeb::species_defs->MAX_CHR_LENGTH / 150 || 1e6;

my $highlights = {'style'=>'box'};
for my $chr (1..22,'X','Y') {
  for( my $start=1 ; $start < $lengths{$chr} ; $start+=$BIN_LENGTH ) {
    my $end = $start + $BIN_LENGTH -1;
    my $N50 = continuous($dbh,$chr,$start,$end);
    print STDERR "$chr -> $start -> $N50\n";
    my $K = $N50 < 0 ? -1 :
         ( $N50 > 5e6 ? 1 : 
           ( $N50 > 1e6 ? 2 : 
             ( $N50 > 5e5 ? 3 :
               ( $N50 > 1e5 ? 4 : 
                 ( $N50 > 1e4 ? 5 : 
                   ( $N50 > 0 ? 6 : 7 )
                 )
               )
             )
           )
         );
             
    push @{$highlights->{$chr}}, {
     'start' => $start,
     'end' => $end,
     'col' => $colours{ "red_$K" }
    } if($K>0);

  }
}

sub continuous {
  my ($dbh,$chr,$start,$end) = @_;
  $start = 1 if($start<1);
  $end   = $lengths{$chr} if $end > $lengths{$chr};
  my $length = $end - $start + 1;
  my $arrayref = $dbh->selectall_arrayref(
    "select chr_start, chr_end, chr_end-chr_start+1 as len
      from js5.N50
     where chr_name = ? and chr_end >= ? and chr_start <= ?
     order by len desc",
    {}, "$chr", $start, $end
  );

  return -1 unless @$arrayref;
  my $N50 = 0;

  foreach( @$arrayref ) {
    my($s,$e,$len,$st) = @$_;
    $s = $start if $start > $s;
    $e = $end   if $end   < $e;
    $N50 += $e-$s+1;
    return $len if $N50>($length/2);
  }
  return 0;
}

my $ideo_dc          = Bio::EnsEMBL::VDrawableContainer->new(
    { 'ca'=>$ca,'ka'=>$ka },
    $Config,
    [$highlights],
    0,
    19      # spacing!
 );
return qq(<p>Unable to generate chromosome image</p>) unless(defined $ideo_dc);
my $ideo_image       = $ideo_dc->render($img_type);
my $imagemap         = $ideo_dc->render('imagemap');
my $ideo_filename    = &Digest::MD5::md5_hex(rand()) . ".karyo.$img_type";
open(IMG_OUT, qq(>$TMP/$ideo_filename)) || die qq(cannot open temporary ideogram image file: $!\n);
binmode IMG_OUT;
print IMG_OUT $ideo_image;
close(IMG_OUT);

print qq(
<br>
<TABLE cellpadding="0" cellspacing="0" border="0">
  <TR valign="top">
    <TD nowrap align="center">
      <!-- begin distribution img -->
      <IMG SRC="$TMP_URL/$ideo_filename" BORDER="0" usemap="#ideo"><br><br>
	  <map name="ideo">\n$imagemap</map>
      <!-- end mapview img -->
    </td>
  </tr>
</table>
);  
print EnsWeb::make_cgi_footer();

sub output {
  $dbh->do("insert into js5.N50 values(?,?,?)",{},@_);
}



1;
