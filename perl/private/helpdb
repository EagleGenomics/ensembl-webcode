#!/usr/local/bin/perl

=head1 NAME

perl/private/helpdb - script to edit the Ensembl help db

=head1 DESCRIPTION

This script allows you to edit, delete and add articles and categories in the
Ensembl help db.

=head1 LICENCE

This code is distributed under an Apache style licence:
Please see http://www.ensembl.org/code_licence.html for details

=head1 AUTHOR

Patrick Meidl <pm2@sanger.ac.uk>

=head1 CONTACT

Post questions to the EnsEMBL development list ensembl-dev@ebi.ac.uk

=cut

use strict;
use warnings;
no warnings 'uninitialized';

$| = 1;

use CGI;
use EnsEMBL::Web::DBSQL::HelpAdaptor;
use EnsEMBL::Web::HelpView::HelpRenderer;
use Data::Dumper;

my $cgi = CGI->new;
my $action = $cgi->param('action') || 'list_articles';

# get DBAdaptor and Renderer objects
my $helpdb = EnsEMBL::Web::DBSQL::HelpAdaptor->new;
my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);

# print header and left menu
my $onload = '';
$onload = 1 if ($cgi->param('preview'));
$renderer->print_header($helpdb->db_string, $onload);

# call the right method to perform the action
no strict 'refs';
&$action($cgi, $helpdb, $renderer);

# print footer
$renderer->print_footer;
1;

### end main ###

=head2 list_articles

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &list_articles($cgi, $helpdb, $renderer);
  Description : Lists all articles in the help db
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub list_articles {
    my ($cgi, $helpdb, $renderer) = @_;

    # get all articles from db
    my $articles = $helpdb->fetch_all_articles($cgi->param('order_by'));

    # render the output list
    $renderer->print_content_heading('All articles');
    $renderer->print_article_list($articles);
}

=head2 edit_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &edit_article($cgi, $helpdb, $renderer);
  Description : Print form to edit an existing article
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub edit_article {
    my ($cgi, $helpdb, $renderer) = @_;

    # get article from db
    my $id = $cgi->param('article_id');
    my $article = $helpdb->fetch_article_by_id($id);

    # print article form with fields filled
    $renderer->print_content_heading('Edit article');
    $renderer->print_article_form(
        'save_article',
        $article->article_id,
        $article->keyword,
        $article->keyword,
        $article->title,
        $article->content,
        $article->category_id,
    );
}

=head2 save_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &save_article($cgi, $helpdb, $renderer);
  Description : Save changes to an existing article to db
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub save_article {
    my ($cgi, $helpdb, $renderer) = @_;
    
    $renderer->print_content_heading('Edit article');

    # preview if required
    if ($cgi->param('preview')) {
        &preview_article($cgi, $helpdb, $renderer);
        return;
    }

    # check required fields
    return unless &check_reqfield_article($cgi, $renderer, [qw(keyword title content category_id)]);

    # if keyword has been changed, check that it's not already in use
    if ($cgi->param('keyword') ne $cgi->param('keyword_orig')) {
        return unless &check_unique_keyword($cgi, $helpdb, $renderer);
    }

    # save changes to db
    eval {
        $helpdb->update_article(
            $cgi->param('article_id'),
            $cgi->param('keyword'),
            $cgi->param('title'),
            $cgi->param('content'),
            $cgi->param('category_id'),
        );
    };
    if ($@) {
        $renderer->print_warning($@);
        return;
    }

    # print confirmation screen
    $renderer->print_content_text('Article updated successfully. Your changes have been written do the database.');
}

=head2 delete_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &delete_article($cgi, $helpdb, $renderer);
  Description : Delete an article from the db (if user confirmed this)
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub delete_article {
    my ($cgi, $helpdb, $renderer) = @_;

    $renderer->print_content_heading('Delete article');

    if ($cgi->param('confirmed')) {
        # delete article from db
        eval { $helpdb->delete_article($cgi->param('article_id')); };
        if ($@) {
            $renderer->print_warning($@);
            return;
        }
        
        # print confirmation screen
        $renderer->print_content_text('Article deleted from database successfully.');
    } else {
        # ask for confirmation
        $renderer->print_delarticle_confirm($cgi->param('article_id'));
    }
}

=head2 new_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &new_article($cgi, $helpdb, $renderer);
  Description : Print form to enter new article
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub new_article {
    my ($cgi, $helpdb, $renderer) = @_;
    $renderer->print_content_heading('New article');
    $renderer->print_article_form('add_article');
}

=head2 add_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &add_article($cgi, $helpdb, $renderer);
  Description : Adds a new article to the db
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub add_article {
    my ($cgi, $helpdb, $renderer) = @_;
    
    $renderer->print_content_heading('New article');

    # preview if required
    if ($cgi->param('preview')) {
        &preview_article($cgi, $helpdb, $renderer);
        return;
    }

    # check required fields
    return unless &check_reqfield_article($cgi, $renderer, [qw(keyword title content category_id)]);

    # check for unique keyword
    return unless &check_unique_keyword($cgi, $helpdb, $renderer);

    # save changes to db
    eval {
        $helpdb->add_article(
            $cgi->param('keyword'),
            $cgi->param('title'),
            $cgi->param('content'),
            $cgi->param('category_id'),
        );
    };
    if ($@) {
        $renderer->print_warning($@);
        return;
    }

    # print confirmation screen
    $renderer->print_content_text('Article added to the database successfully.');
}

=head2 preview_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &preview_article($cgi, $helpdb, $renderer);
  Description : reloads form and print preview to popup window
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub preview_article {
    my ($cgi, $helpdb, $renderer) = @_;

    # write preview html to tmp file
    $renderer->print_preview($cgi->param('title'), $cgi->param('content'));
    
    # reload article form
    $renderer->print_article_form(
        $cgi->param('action'),
        $cgi->param('article_id'),
        $cgi->param('keyword'),
        $cgi->param('keyword_orig'),
        $cgi->param('title'),
        $cgi->param('content'),
        $cgi->param('category_id'),
    );
}

=head2 list_categories

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &list_categories($cgi, $helpdb, $renderer);
  Description : List all categories in the help db
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub list_categories {
    my ($cgi, $helpdb, $renderer) = @_;

    # get all categories from db
    my $categories = $helpdb->fetch_all_categories;

    # render the output list
    $renderer->print_content_heading('All categories');
    $renderer->print_category_list($categories);
}

=head2 edit_category

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &edit_category($cgi, $helpdb, $renderer);
  Description : Print form to edit an existing category
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub edit_category {
    my ($cgi, $helpdb, $renderer) = @_;

    # get category from db
    my $id = $cgi->param('category_id');
    my $category = $helpdb->fetch_category_by_id($id);

    # print category form with fields filled
    $renderer->print_content_heading('Edit category');
    $renderer->print_category_form(
        'save_category',
        $category->category_id,
        $category->name,
        $category->priority,
    );
}

=head2 save_category

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &save_category($cgi, $helpdb, $renderer);
  Description : Save changes to existing category to db
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub save_category {
    my ($cgi, $helpdb, $renderer) = @_;
    
    $renderer->print_content_heading('Edit category');

    # check required fields
    return unless &check_reqfield_category($cgi, $renderer, [qw(name priority)]);

    # save changes to db
    eval {
        $helpdb->update_category(
            $cgi->param('category_id'),
            $cgi->param('name'),
            $cgi->param('priority'),
        );
    };
    if ($@) {
        $renderer->print_warning($@);
        return;
    }

    # print confirmation screen
    $renderer->print_content_text('Category updated successfully. Your changes have been written do the database.');
}

=head2 delete category

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &delete_category($cgi, $helpdb, $renderer);
  Description : Deletes a category from the db (if user confirmed this)
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub delete_category {
    my ($cgi, $helpdb, $renderer) = @_;

    $renderer->print_content_heading('Delete category');

    if ($cgi->param('confirmed')) {
        # delete category from db
        eval { $helpdb->delete_category($cgi->param('category_id')); };
        if ($@) {
            $renderer->print_warning($@);
            return;
        }
        
        # print confirmation screen
        $renderer->print_content_text('Category deleted from database successfully.');
    } else {
        # ask for confirmation
        $renderer->print_delcategory_confirm($cgi->param('category_id'));
    }
}

=head2 new_category

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &new_category($cgi, $helpdb, $renderer);
  Description : Print form to enter new category
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub new_category {
    my ($cgi, $helpdb, $renderer) = @_;
    $renderer->print_content_heading('New category');
    $renderer->print_category_form('add_category');
}

=head2 add category

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                &add_category($cgi, $helpdb, $renderer);
  Description : Adds a new category to the db
  Return type : none
  Exceptions  : none
  Caller      : internal

=cut

sub add_category {
    my ($cgi, $helpdb, $renderer) = @_;
    
    $renderer->print_content_heading('New category');

    # check required fields
    return unless &check_reqfield_category($cgi, $renderer, [qw(name priority)]);

    # save changes to db
    eval {
        $helpdb->add_category(
            $cgi->param('name'),
            $cgi->param('priority'),
        );
    };
    if ($@) {
        $renderer->print_warning($@);
        return;
    }

    # print confirmation screen
    $renderer->print_content_text('Category added to the database successfully.');
}

=head2 check_reqfield_article

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Arg[3]      : listref of required parameter names
  Example     : my $cgi = CGI->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                unless (&check_reqfield_article($cgi, $renderer, [qw(keyword title content category_id)])) {
                    print "Missing required fields\n";
                }
  Description : Checks if all required fields have been filled in
  Return type : 0 if parameters are missing, 1 if ok
  Exceptions  : none
  Caller      : internal

=cut

sub check_reqfield_article {
    my ($cgi, $renderer, $params) = @_;
    my $missing;
    map { $cgi->param($_) ? 0 : $missing++ } @$params;
    if ($missing) {
        $renderer->print_warning('You must fill in all fields!');
        $renderer->print_article_form(
            $cgi->param('action'),
            $cgi->param('article_id'),
            $cgi->param('keyword'),
            $cgi->param('keyword_orig'),
            $cgi->param('title'),
            $cgi->param('content'),
            $cgi->param('category_id'),
        );
        return 0;
    }
    return 1;
}

=head2 check_unique_keyword

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpAdaptor $helpdb - helpdb adaptor
  Arg[3]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Example     : my $helpdb = EnsEMBL::Web::HelpView::HelpAdaptor->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                my $cgi = CGI->new;
                unless (&check_unique_keyword($cgi, $helpdb, $renderer)) {
                    print "Duplicate keyword\n";
                }
  Description : Checks if the keyword entered by the user is already in use
                for another article.
  Return type : 0 on failure, 1 on success
  Exceptions  : none
  Caller      : internal

=cut

sub check_unique_keyword {
    my ($cgi, $helpdb, $renderer) = @_;
    my $article = $helpdb->fetch_article_by_keyword($cgi->param('keyword'));
    if ($article && ($article->article_id ne $cgi->param('article_id'))) {
        $renderer->print_warning('Keyword already in use - try a different one!');
        $renderer->print_article_form(
            $cgi->param('action'),
            $cgi->param('article_id'),
            $cgi->param('keyword'),
            $cgi->param('keyword_orig'),
            $cgi->param('title'),
            $cgi->param('content'),
            $cgi->param('category_id'),
        );
        return 0;
    }
    return 1;
}

=head2 check_reqfield_category

  Arg[1]      : CGI $cgi - CGI object
  Arg[2]      : EnsEMBL::Web::HelpView::HelpRenderer $renderer - renderer
  Arg[3]      : listref of required parameter names
  Example     : my $cgi = CGI->new;
                my $renderer = EnsEMBL::Web::HelpView::HelpRenderer->new($helpdb);
                unless (&check_reqfield_category($cgi, $renderer, [qw(category_id name priority)])) {
                    print "Missing required fields\n";
                }
  Description : Checks if all required category fields have been filled in
  Return type : 0 if parameters are missing, 1 if ok
  Exceptions  : none
  Caller      : internal

=cut

sub check_reqfield_category {
    my ($cgi, $renderer, $params) = @_;
    my $missing;
    map { $cgi->param($_) ? 0 : $missing++ } @$params;
    if ($missing) {
        $renderer->print_warning('You must fill in all fields!');
        $renderer->print_category_form(
            $cgi->param('action'),
            $cgi->param('category_id'),
            $cgi->param('name'),
            $cgi->param('priority'),
        );
        return 0;
    }
    return 1;
}

