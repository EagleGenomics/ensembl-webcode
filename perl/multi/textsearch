#!/usr/local/bin/perl 
##############################################################################
#   
#   Name:           unisearch           
#   
#   Description:    A universal searcher for ensembl - a passed string is used
#                   to look up all types of ensembl object.  If only one match
#                   is found, the user is redirected to that object.  If more 
#                   than one match is found, the user is presented with a page
#                   of matches, sorted by type.
#                   The number of matches/type is limited.
#
#   Author:         jws
#
#   History:        2000-10-05  jws:    initial version
#                   2000-10-20  jws:    improved portability
#		    2000-11-29	jws:	added Protein Feature searches
#		    2000-12-05	jws:	Added golden checking for clone|contig
#		    2001-02-12	jws:	Added Protein Family searches
#
##############################################################################

BEGIN{
  unshift (@INC, "/usr/users/ensembl/www/ensembl-compara/modules/");
}

use CGI;
use DBI;
use EnsWeb;
use EnsEMBL::HTML::Page;
use EnsEMBL::Web::HelpView;
use strict;



##########################
# Set up database handles
##########################
my $db={  host => "shaggy.fugu-sg.org",
          db_name => "search",
          table => "fugu_search",
          user => "fugu",
          port => "9999"
        };

sub connect_to{
  my $dsn="dbi:mysql:database=$db->{db_name};host=$db->{host};port=$db->{port}";# DBI
  my $dbh=DBI->connect($dsn,$db->{user});
  die "unable to connect to database $db->{host}\n" unless $dbh;
  return $dbh;  
}

my $dbh=connect_to;

############################
# Retrieve the passed query
############################
my $q           = &CGI::param('q')       || '';
my $search_type = lc(&CGI::param('type') || 'all');
my $batch       = &CGI::param('batch')   || 0;
my $limit       = &CGI::param('limit')   || 20;
my $offset      = $batch * $limit;

print STDERR "$0: $q,$search_type,$offset,$limit\n";

# clean up input
$q=~s/^\s*//;
$q=~s/\s*$//;

####################
# Print page header
####################
my $r = Apache->request();
print CGI::header();
$r->err_header_out('ensembl_headers_out'=>1);
print ensembl_page_header(('initfocus'=>0, 'menus'=>0));
print ensembl_search_table($q||"", $search_type);
    
#######################
# Print Search Heading
#######################
print qq(
    <br />
    <table cellspacing="0" cellpadding="0" border="0" width="100%" class="background1">
        <tr>
            <td colspan="4" class="black"><img src="/gfx/blank.gif" width="1" height="1"></td>
        </tr>   
        <tr>
            <td colspan="4"><img src="/gfx/blank.gif" height="6"></td>
        </tr>
        <tr>
            <td>&nbsp;</td>
            <td><span class="h4">Search for "$q"</span></td>
            <td><img src="/gfx/blank.gif" height="8" width="1"></td>
            <td>&nbsp;</td>
        </tr>
        <tr>
            <td colspan="4"><img src="/gfx/blank.gif" height="6"></td>
        </tr>
        <tr>
            <td colspan="4" class="black"><img src="/gfx/blank.gif" width="1" height="1"></td>
        </tr>
    </table>
);

if ($q eq ''){
    # Nothing to search with, so forget it.
    print qq(
        <h3>You searched for nothing so found nothing.</h3>
        <p></p>Try specifying a search string.</p>
    );
} else {

######################
# Do all the searches
######################

    my $sth = $dbh->prepare(
        "select count(*) from $db->{table} where match(keywords) against (? in boolean mode)"
    );

    #######################################################################
    # Get matches & urls, if passed.  If they aren't here, then we print a
    # "No Results" page...
    #######################################################################

    $sth->execute("+$q");
    my($hits) = $sth->fetchrow_array();

    if($hits>0) {
        ##################################
        # Got matches, so get them...
        ##################################
        if($offset > $hits) {
            $batch = int(($hits-1)/$limit);
            $offset = $limit * $batch;
        }
        my $sth = $dbh->prepare(
            "select *, match( keywords ) against ( ? in boolean mode ) from $db->{table} ".
            "where match( keywords ) against ( ? in boolean mode ) limit $offset,$limit"
        );

        $sth->execute( "+$q", "+$q" );
    
        my $arrayref = $sth->fetchall_arrayref();
        if($hits>$limit) {
            printf "<p>Your search returned $hits matches (matches %d-%d listed below)</p>",
                    $offset+1, ($offset+$limit>$hits ? $hits : $offset+$limit);
            print "<blockquote><small>Pages: ";
            my $qq = $q; $qq=~s/ /+/g;
            my $URL   = qq(/$ENV{'ENSEMBL_SPECIES'}/$ENV{'ENSEMBL_SCRIPT'}?q=$qq&limit=$limit&type=search_type&batch=);
            for(my $i=0;$i<=(($hits-1)/$limit);$i++) {
                if($i==$batch) {
                    print ($i+1);
                    print qq( );
                } else {
                    print qq(<a href="$URL$i">).($i+1).qq(</a> );
                }
            }
            print "</small></blockquote>";
            print "<dl>\n",
        } else {
            print "<p>Your search returned $hits matches</p><dl>\n";
        }
        foreach my $hr (@$arrayref) {
            my $rel = sprintf("%0.02f",$hr->[5]);
            print qq(
<dt>&nbsp;&nbsp;&nbsp; <b>$hr->[0]:</b> <a href="$hr->[2]">$hr->[1]</a> (Relevance $rel)</dt>
<dd>$hr->[4]</dd>
<dt>&nbsp;</dt>);
        }
        print "</dl><br />\n";
    } else {
        my $SELF   = qq(/$ENV{'ENSEMBL_SPECIES'}/$ENV{'ENSEMBL_SCRIPT'});
        $SELF =~ s|.*/(.*)|$1|;
        my $help_link = "";
        eval{
            $help_link = &EnsEMBL::Web::HelpView::helplink($SELF);
        };
        if ($@){
            $help_link = "/$ENV{'ENSEMBL_SPECIES'}/helpview";    
            print STDERR "Error in helpview link creation: $@\n";
        }
        print qq(
        <h3>Your Search has Returned No Results</h3>
        <p>You can try another search by typing a string in the box above.
            Try adding a "*" character to do a wildcard search.</p>
        <p>Click <A HREF="$help_link"><img border="0" align="top" alt="Click for help" src="/gfx/helpview/help.gif"></A>
            for more help on Ensembl identifier searches.</p>
        );
    }
}    


$dbh->disconnect();

print ensembl_help_link();
use Bio::EnsEMBL::Registry; Bio::EnsEMBL::Registry->disconnect_all();
Apache::exit;
1;
