#!/usr/local/bin/perl
package exonview;

use strict;
use warnings;
no warnings "uninitialized";

use EnsEMBL::Web::Input;
use EnsEMBL::Web::Output::HTML;
use EnsEMBL::Web::DataFactory::TranscriptFactory;
use EnsEMBL::DB::DBConnection;			    

$| = 1; 

my $input  = EnsEMBL::Web::Input->new( 'exonview' ); 	
   $input->initialise_from_cgi();
my $output = EnsEMBL::Web::Output::HTML->new(  );
my $dbs    = EnsEMBL::DB::DBConnection->new( $input->species );
my $exonFactory = EnsEMBL::Web::DataFactory::TranscriptFactory->new(	
							$dbs,
							$input, 
							$output );

$exonFactory->createObjects();	

if ( $exonFactory->has_a_problem ) {	
    if ($exonFactory->has_problem_type('mapped_id') || $exonFactory->has_problem_type('multiple_matches')){
        my $transcript = $exonFactory->featureIds->[0];
        my $db	 = $input->param('db') || 'core' ;
        $output->page_redirect ("/$ENV{'ENSEMBL_SPECIES'}/$ENV{'ENSEMBL_SCRIPT'}?transcript=$transcript&db=$db");
    } else {
        $output->error_page( $exonFactory->problem->[0]) ; 
        $output->ensembl_exit;
    }
} else {
    $output->start; 
    for my $trans_data ( @{$exonFactory->DataObjects} ) {
        my $transcript_renderer = $trans_data->renderer;
        $transcript_renderer->Output->generic_table_title('Vega Exon Report');
        $transcript_renderer->Output->print_two_col_table(
                $transcript_renderer->transcript_display_ID,
                $transcript_renderer->vega_stable_id,
                $transcript_renderer->version,
                $transcript_renderer->transcript_class,
                $transcript_renderer->other_view_links_exon('Transcript Information'),
                $transcript_renderer->genomic_location,
                $transcript_renderer->description,
        );
        $transcript_renderer->exonListTable;
        $transcript_renderer->supportingEvidenceImage;			
    }
    $output->end;
}

use Bio::EnsEMBL::Registry; Bio::EnsEMBL::Registry->disconnect_all();1;


1;

