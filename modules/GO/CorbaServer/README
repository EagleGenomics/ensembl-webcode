Perl CORBA server

allows remote clients written in any language (with corba bindings) to
connect to the db (actually connects to object server).

see go.idl - this describes the interface to the system

see software/t/test-client.pl for an example perl client; java
examples coming soon.

you need an IOR for the client - this is a locator (like a URL) for a
corba server instance. note there can be multiple go servers running,
all with different IORs (of course there should only be one
in-production server running). the IOR is dumped by the server
(go_server.pl -see below). the easiest way to test is to run the
client and server in the same directory - that way the default
(./go_server.ior) is used. you can specify a different IOR with the
ior_file option. you can connect to an IOR on a different machine by
either copying the IOR file or having it visible with http and using
-ior_url.

REQUIREMENTS FOR CLIENT: any orb for the language you are using.
recommended:
	perl: ORBIT
	java: JacORB
	python: ???? 
	jpython: [maybe JacORB?]

do a search on google.com for any of these, or contact me
cjm@fruitfly.org for assistance

==============

the CORBA idl is a wrapper that implements a thin perl object cache
and directs most calls to GO::Tools

the object cache means that it is ideal for writing "thin clients"; ie
most of the clever stuff can happen on the server. the client only
requests/receives what it needs to know to build the display. it can
also be used to support bigger clients with full client side object
models etc too.


==============

running the server:

there should always be a server process running; there can be multiple
ones running eg test and live.

REQUIREMENTS FOR PERL SERVER: 
	Orbit (Fast open source C ORB)
	CORBA::ORBIT (perl bindings for orbit)

Orbit generally comes with linux - for other unixes you may have to
install yourself

//

to run your own corba server:

cd software
perl t/go_server.pl

the IOR will be dumped in the current dir as go_server.ior; if you
want remote clients to connect you can put the IOR somewhere visible
over the web (eg www.geneontology.org/go/go_server.idl) so clients can
fetch the IOR over httpd and then transparently connect to the server.

note: make sure go.idl is in the current dir [ie with symlink] or make
env var GO_IDLFILE point to it

you can setenv GOSERVER_DBNAME to use a different dbname from the default
(go); eg for running tests on test dbs. see schema/README

you can also set stuff in go_server.config

should run (moderately) happily (ignore the crap it spews out)
